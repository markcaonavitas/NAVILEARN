//#define DOWNLOAD_TESTING

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using Xamarin.Forms;
using System.Reflection;
using Xamarin.Forms.Xaml;
//using Plugin.FilePicker; //I don't like it... Too much information and ability for user
using System.Collections.ObjectModel;
using Xamarin.Essentials;
using System.Text.RegularExpressions;
using System.Xml.Serialization;


namespace NavitasBeta
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class FirmwareDownloadPage : NavitasGeneralPage
    {
        public event EventHandler<WriteEventArgs> Write = delegate { };
        public event EventHandler<WriteBlockEventArgs> Write20Bytes = delegate { };
        public event EventHandler<WriteEventArgs> ProgrammingDone = delegate { };
        public event EventHandler<WriteBlockEventArgs> WriteBlock = delegate { };

        //below is bootloading code from the f2803x_flash_kernel.txt output of FlashLoaderWorkspace28034 CCS project. Paste the text here and select it all then use Visual studio regex to replace \r\cr with a space, replace 3 spaces with one space, replace 2 spaces with one space. replace one space with ",0x"
        static IEnumerable<byte> mybytes = new byte[] {
        0xAA,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF,0x83,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0xC4,0x83,0xCF,0x00,0x00,0x00,0x50,0x00,0x0C,0xFE,0x40,0x76,0xBD,0x80,0x22,0x76,0xA9,0x28,0x04,0xFF,0xBF,0x9B,0x1F,0x76,0x34,0x00,0x04,0x1E,0x1F,0x76,0x34,0x00,0x00,0x02,0x02,0x1E,0x1A,0x76,0x69,0xFF,0x40,0x76,0x66,0x81,0x1F,0x76,0x40,0x02,0x08,0x2B,0x02,0x2B,0x03,0x2B,0x00,0x2B,0x01,0x2B,0x04,0x2B,0x05,0x2B,0x07,0x2B,0x0A,0xC5,0x67,0x3E,0x48,0x96,0xEF,0xFF,0xA7,0x00,0xA9,0x1B,0x00,0x04,0x71,0x69,0x40,0x76,0x44,0x81,0x46,0x1E,0x4C,0x2B,0x38,0x6F,0x00,0x8F,0x40,0x90,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x4B,0x1B,0x00,0x04,0x10,0x66,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x4B,0x1B,0x00,0x04,0xF2,0x69,0x00,0x8F,0x00,0x04,0xA9,0xA8,0x46,0x07,0x40,0x76,0x7E,0x81,0x00,0x52,0xE1,0xFF,0x82,0x00,0x00,0x8F,0x0C,0x90,0x80,0x76,0x00,0x04,0x40,0x8F,0x40,0x90,0x42,0xA8,0xA6,0x06,0x46,0x8A,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x72,0x60,0x00,0x8F,0x00,0x04,0xA9,0xA8,0x46,0x07,0x46,0x1E,0x40,0x76,0x66,0x81,0x4C,0x0A,0x48,0x92,0xC9,0xFF,0x4C,0x54,0xC6,0x66,0x00,0x8F,0x40,0x90,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x0D,0x6F,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x48,0xCC,0xFF,0x03,0x4B,0x54,0xF1,0x67,0x48,0xCC,0xFF,0x03,0xA9,0x0E,0x46,0x07,0x40,0x76,0x7E,0x81,0x00,0x52,0x48,0x61,0x00,0x8F,0x0C,0x90,0x42,0xA8,0x40,0x8F,0x40,0x90,0x48,0xCC,0xFF,0x03,0x46,0x8A,0xA9,0x0E,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x39,0x60,0x40,0x76,0x66,0x81,0x2E,0x6F,0x40,0x76,0x44,0x81,0x46,0x1E,0x00,0x8F,0x40,0x90,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x0D,0x6F,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x48,0x92,0x4B,0x54,0xF2,0x67,0x48,0x0E,0x46,0x07,0x40,0x76,0x7E,0x81,0x00,0x52,0x18,0x61,0x00,0x8F,0x0C,0x90,0x40,0x8F,0x40,0x90,0x42,0xA8,0x48,0x0E,0x46,0x8A,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x0B,0x60,0x40,0x76,0x66,0x81,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0x48,0x96,0x00,0x52,0xE0,0xFF,0x5A,0xFF,0x8C,0xFE,0x06,0x00,0x01,0x19,0xC3,0x56,0xFF,0xFF,0x06,0x00,0xCF,0x03,0x00,0x00,0x00,0x80,0x40,0x76,0x24,0x80,0x22,0x76,0x1F,0x76,0xC0,0x01,0x1C,0x1A,0x08,0x00,0x69,0xFF,0xFD,0x76,0x80,0x7C,0x67,0x3E,0x1F,0x76,0xC0,0x01,0x1C,0x18,0xF7,0xFF,0x1A,0x76,0x69,0xFF,0x40,0x76,0xEE,0x80,0x0C,0x9A,0x02,0x9B,0x40,0x76,0x2C,0x80,0x40,0x76,0x81,0x80,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x25,0x55,0xBF,0x56,0x25,0xAA,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x29,0x68,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x42,0x97,0x41,0x96,0x1F,0x76,0xC0,0x01,0x11,0x43,0x06,0x6C,0x22,0x76,0x11,0x1A,0x10,0x00,0x1A,0x76,0x25,0x76,0x11,0xCC,0x80,0x01,0xC6,0xFF,0x05,0x61,0x22,0x76,0x11,0x18,0x7F,0xFE,0x1A,0x76,0x41,0x0E,0xA6,0x1E,0x21,0x92,0x0F,0x90,0xA9,0x80,0xA6,0x06,0xA7,0x0F,0x16,0x61,0x22,0x76,0x11,0x1A,0x40,0x00,0x41,0x92,0x21,0xCD,0xF0,0xFF,0x0F,0x90,0xA8,0xCA,0x21,0x96,0x1A,0x76,0x69,0xFF,0x40,0x76,0x24,0x80,0x11,0x92,0x01,0x90,0x01,0x52,0xFD,0x60,0x22,0x76,0x11,0x18,0xBF,0xFF,0x1A,0x76,0x42,0x92,0x01,0x52,0x03,0x61,0x02,0x52,0x09,0x60,0x22,0x76,0x03,0x90,0x11,0xCD,0x7F,0xFE,0x86,0xFF,0xA8,0xCA,0x11,0x96,0x1A,0x76,0x42,0x92,0x03,0x52,0x12,0x60,0x22,0x76,0x11,0xCC,0x7F,0xFE,0xA9,0x1A,0x00,0x01,0x11,0x96,0x00,0x8F,0x56,0x02,0x69,0xFF,0xA9,0xA8,0x40,0x76,0x1B,0x01,0x1F,0x76,0xC0,0x01,0x11,0x1A,0x80,0x01,0x1A,0x76,0x69,0xFF,0x82,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x1B,0x02,0x10,0xCC,0xFC,0xFF,0x02,0x50,0x10,0x96,0x1C,0x1A,0x08,0x00,0x20,0x1A,0x01,0x00,0x20,0x1A,0x02,0x00,0x20,0x1A,0x04,0x00,0x1D,0x1A,0x00,0x01,0x1C,0x1A,0x00,0x40,0x1D,0x1A,0x00,0x40,0x1D,0x1A,0x01,0x00,0x1D,0x1A,0x02,0x00,0x1D,0x1A,0x04,0x00,0x1D,0x1A,0x08,0x00,0x1D,0x1A,0x10,0x00,0x1D,0x1A,0x20,0x00,0x1D,0x1A,0x40,0x00,0x1C,0x1A,0x01,0x00,0x1C,0x1A,0x10,0x00,0x1C,0x1A,0x02,0x00,0x20,0x1A,0x00,0x40,0x1C,0x1A,0x00,0x04,0x1C,0x1A,0x00,0x01,0x1C,0x1A,0x00,0x02,0x19,0x1A,0x00,0x01,0x19,0x1A,0x00,0x02,0x1C,0x1A,0x04,0x00,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x22,0x76,0x1F,0x76,0x2B,0x00,0x20,0x28,0xFF,0xFF,0x21,0x28,0xFF,0xFF,0x22,0x28,0xFF,0xFF,0x23,0x28,0xFF,0xFF,0x24,0x28,0xFF,0xFF,0x25,0x28,0xFF,0xFF,0x26,0x28,0xFF,0xFF,0x27,0x28,0xFF,0xFF,0x1A,0x76,0x1F,0x76,0xFF,0xFD,0x38,0x92,0x41,0x96,0x39,0x92,0x41,0x96,0x3A,0x92,0x41,0x96,0x3B,0x92,0x41,0x96,0x3C,0x92,0x41,0x96,0x3D,0x92,0x41,0x96,0x3E,0x92,0x41,0x96,0x3F,0x92,0x41,0x96,0x1F,0x76,0x2B,0x00,0x2F,0x40,0x03,0x6D,0x01,0x9A,0x02,0x6F,0x00,0x9A,0x69,0xFF,0x82,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xFE,0x12,0x18,0xFE,0xFF,0x12,0x1A,0x00,0x20,0x12,0x1A,0x00,0x40,0x12,0x1A,0x00,0x04,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xFB,0x12,0x1A,0x02,0x00,0x12,0x1A,0x00,0x20,0x12,0x1A,0x00,0x40,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xBF,0x00,0x8F,0xDD,0x2E,0x69,0xFF,0xA9,0xA8,0x40,0x76,0x1B,0x01,0x1F,0x76,0xC0,0x01,0x12,0x1A,0x00,0x20,0x12,0x18,0xFD,0xFF,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x1A,0x00,0x04,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x10,0x1A,0x40,0x00,0x12,0x1A,0x00,0x40,0x12,0x18,0xFF,0xDF,0x12,0x18,0xFD,0xFF,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x1A,0x00,0x04,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0x01,0x29,0xA9,0x25,0x42,0x1E,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0xA9,0x0E,0x42,0x98,0x41,0x99,0x42,0x06,0x82,0xFE,0x06,0x00,0x02,0xFE,0xBF,0x56,0x41,0x01,0x41,0x92,0x08,0x52,0x09,0x66,0x1F,0x76,0x40,0x02,0x0A,0xC5,0x67,0x3E,0x41,0x0A,0x41,0x92,0x08,0x52,0xF9,0x69,0x82,0xFE,0x06,0x00,0x1F,0x76,0xC1,0x01,0x14,0x47,0xFD,0x6C,0x1F,0x76,0x40,0x02,0x06,0xC6,0x1F,0x76,0xC1,0x01,0x19,0x96,0x14,0x47,0xFF,0x6C,0x1F,0x76,0x40,0x02,0x06,0xCC,0x00,0xFF,0x1F,0x76,0xC1,0x01,0xC7,0xFF,0x19,0x96,0x1F,0x76,0x40,0x02,0x06,0x2B,0x06,0x00,0x04,0xFE,0x42,0x1E,0x43,0x2B,0x3E,0x8F,0x00,0x80,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xA0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x08,0x92,0x09,0x60,0xBF,0x56,0x08,0x01,0x80,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xA0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xC0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x02,0x92,0x09,0x60,0xBF,0x56,0x02,0x01,0x40,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xC0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xE0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x03,0x92,0x09,0x60,0xBF,0x56,0x03,0x01,0x20,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xE0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x00,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x00,0x92,0x09,0x60,0xBF,0x56,0x00,0x01,0x10,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x00,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x20,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x01,0x92,0x09,0x60,0xBF,0x56,0x01,0x01,0x08,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x20,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x40,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x04,0x92,0x09,0x60,0xBF,0x56,0x04,0x01,0x04,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x40,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x60,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x05,0x92,0x09,0x60,0xBF,0x56,0x05,0x01,0x02,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x60,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x80,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x40,0x02,0x07,0x92,0x09,0x60,0xBF,0x56,0x07,0x01,0x01,0x9A,0x00,0x8F,0x0C,0x90,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x43,0x92,0x03,0x60,0x01,0x9A,0x02,0x6F,0x00,0x9A,0x84,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x1C,0x1A,0x00,0x04,0xBF,0x56,0x1B,0x02,0x1F,0x76,0xC1,0x01,0x1A,0x28,0x00,0x80,0xBF,0x56,0x10,0x07,0xBF,0x56,0x11,0x03,0x14,0x2B,0xBF,0x56,0x11,0x23,0x1F,0x76,0xBE,0x01,0x0D,0x18,0xFF,0xCF,0x09,0x1A,0x00,0x05,0x05,0x1A,0x00,0x03,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x1F,0x76,0xC1,0x01,0xBF,0x56,0x13,0x01,0x1C,0x1A,0x00,0x20,0x1C,0x1A,0x00,0x40,0x1C,0xCC,0x00,0x80,0xCE,0xFF,0x01,0x52,0xFC,0x60,0x1C,0x1A,0x00,0x40,0x1C,0x18,0xFF,0xDF,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x41,0x96,0x19,0x96,0x82,0xFE,0x06,0x00,0x02,0xFE,0x00,0x8F,0xB5,0x82,0x1F,0x76,0x40,0x02,0x0A,0xA8,0x40,0x76,0x38,0x82,0x40,0x76,0x55,0x82,0x1F,0x76,0x40,0x02,0x06,0x2B,0x40,0x76,0xB5,0x82,0xA9,0x88,0x00,0x8F,0xAA,0x08,0xA9,0xA8,0xA6,0x0F,0x04,0x61,0x3F,0x8F,0xF6,0x7F,0x09,0x6F,0x40,0x76,0x56,0x81,0x40,0x76,0x44,0x81,0x42,0x1E,0x40,0x76,0x50,0x00,0x42,0x8A,0xA9,0xA8,0x82,0xFE,0x06,0x00,0x02,0xFE,0x41,0x2B,0x42,0x2B,0x1F,0x76,0xC1,0x01,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFA,0x60,0x17,0xC6,0x41,0x96,0x19,0x96,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x42,0x96,0x19,0x96,0x1F,0x76,0x40,0x02,0x41,0x92,0x06,0x94,0x42,0x94,0x06,0x96,0x03,0x56,0x42,0x08,0x41,0x98,0x41,0x92,0x82,0xFE,0x06,0x00,0x02,0xFE,0x41,0x2B,0x42,0x2B,0x1F,0x76,0xC1,0x01,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFA,0x60,0x17,0xC6,0x41,0x96,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x42,0x96,0x1F,0x76,0x40,0x02,0x41,0x92,0x06,0x94,0x42,0x94,0x06,0x96,0x03,0x56,0x42,0x08,0x41,0x98,0x41,0x92,0x82,0xFE,0x06,0x00,0xAD,0x28,0x80,0x04,0x69,0xFF,0x1F,0x56,0x16,0x56,0x1A,0x56,0x40,0x29,0x1F,0x76,0x00,0x00,0x02,0x29,0x1B,0x76,0x40,0x76,0xCC,0x83,0x00,0x52,0x42,0x61,0x22,0x76,0xA9,0x28,0x1F,0x01,0xA8,0x28,0x00,0x00,0x01,0x09,0x1B,0x61,0xC0,0x76,0x1F,0x01,0x04,0x29,0x0F,0x6F,0x00,0x9B,0xA9,0x24,0x01,0xDF,0x04,0x6C,0x04,0x29,0xA8,0x24,0x01,0xDF,0xA6,0x1E,0xA1,0xF7,0x86,0x24,0xA7,0x06,0xA1,0x81,0x01,0x09,0xA7,0x1E,0xA9,0x24,0x03,0x63,0x5C,0xFF,0x04,0x3B,0xA9,0x59,0x01,0xDF,0x09,0x00,0xEC,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0x01,0x09,0x05,0x61,0x3F,0x8F,0xFF,0xFF,0x40,0x76,0x51,0x83,0x1A,0x76,0x40,0x76,0xCE,0x83,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0x01,0x09,0x0E,0x61,0xFF,0x76,0xFF,0xFF,0x06,0x6F,0x01,0xDF,0xBD,0xC3,0xA7,0x1E,0x67,0x3E,0xBE,0xC5,0xA9,0x24,0x01,0xDF,0xA8,0x24,0x58,0xFF,0xF7,0x60,0x40,0x76,0x92,0x83,0x40,0x76,0x2A,0x83,0x00,0x77,0x00,0x6F,0xBD,0xB2,0x1F,0x76,0x51,0x02,0xA9,0x59,0x00,0x92,0x0D,0x61,0xAB,0x28,0xFF,0xFF,0xAA,0x28,0xFF,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0xAB,0x0F,0x03,0x61,0x7F,0x76,0xFF,0xFF,0x1F,0x76,0x51,0x02,0x06,0xC5,0x67,0x3E,0x1F,0x76,0x51,0x02,0x04,0xC5,0xA7,0x06,0x03,0x61,0xA1,0x92,0x67,0x3E,0x1F,0x76,0x51,0x02,0x02,0x06,0x03,0x61,0xA7,0x1E,0x67,0x3E,0x40,0x76,0x28,0x83,0xBE,0x8B,0x06,0x00,0xBD,0xB2,0xBD,0xAA,0xBD,0xA2,0x08,0xFE,0xA4,0x82,0xCB,0x5A,0x00,0xD1,0x15,0x6F,0xAD,0x5C,0x01,0x29,0x03,0x56,0xA1,0x03,0x88,0xDC,0xA3,0x07,0xA4,0x5C,0x02,0x09,0xA9,0x83,0x08,0x02,0x40,0x76,0x75,0x83,0x42,0x06,0x06,0x61,0x44,0x8A,0x46,0x83,0x40,0x76,0x75,0x83,0xCB,0x5A,0x01,0xD9,0xA2,0x92,0xA1,0x54,0xEA,0x66,0x88,0xFE,0xBE,0x82,0xBE,0x86,0xBE,0x8B,0x06,0x00,0x00,0x52,0xAB,0xA8,0xA4,0xC5,0x07,0x61,0xA9,0x88,0x81,0xDE,0x85,0x5C,0x87,0x7C,0x0E,0x00,0xFE,0xFF,0xA9,0x88,0xA6,0x0F,0x0F,0x61,0x00,0x53,0x0D,0x61,0xFF,0x9D,0xA8,0x5C,0xBF,0x76,0xFE,0xFF,0x85,0x92,0x87,0x96,0x0E,0x00,0xFE,0xFF,0x85,0x92,0x87,0x96,0x0C,0x00,0xF8,0xFF,0xA4,0xA9,0x06,0x00,0xAB,0x28,0xFF,0xFF,0xAA,0x28,0xFF,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0xAB,0x0F,0x04,0x60,0x00,0xBE,0x00,0xD4,0x09,0x6F,0xA9,0x8A,0xA9,0x28,0xFF,0xFF,0xC4,0x88,0xA8,0x28,0xFF,0xFF,0x02,0x09,0xA9,0x8A,0xA6,0x92,0x40,0x76,0xAB,0x83,0x06,0x00,0x40,0x76,0x24,0x80,0x40,0x76,0xEE,0x80,0x0C,0x9A,0x02,0x9B,0x40,0x76,0x2C,0x80,0x00,0x8F,0xAE,0x04,0xA9,0xA8,0x40,0x76,0x1B,0x01,0x40,0x76,0x71,0x82,0x06,0x00,0x1F,0x76,0x51,0x02,0x08,0xA8,0x06,0x00,0x1F,0x76,0x51,0x02,0x06,0xA8,0x06,0x00,0x06,0x00,0x1F,0x56,0x22,0x76,0xC0,0xB9,0x29,0x28,0x68,0x00,0x1A,0x76,0x40,0x00,0xD4,0x82,0x01,0x9A,0x06,0x00,0x06,0x00,0x26,0x00,0x00,0x00,0xCF,0x83,0xAD,0x28,0x80,0x04,0x1F,0x56,0x16,0x56,0x1A,0x56,0x40,0x29,0x1F,0x76,0x00,0x00,0x02,0x29,0x69,0xFF,0x40,0x76,0xAB,0x83,0xCF,0x56,0x02,0x00,0xAD,0x28,0x80,0x04,0xBD,0x2B,0xBD,0x2B,0xBD,0x1E,0x07,0x00,0x33,0x56,0xAC,0x1E,0xA9,0x58,0xA9,0x59,0xA9,0x5A,0xA9,0x5B,0xA9,0x5C,0xA9,0x5D,0xA9,0x88,0xA9,0x80,0x1F,0x76,0x00,0x00,0xBD,0x2B,0xBD,0x28,0x0B,0x0A,0x00,0x76,0x13,0x76,0x06,0x00,0x1A,0x00,0x00,0x00,0x1F,0x01,0xFF,0xFF,0x40,0x94,0x00,0x00,0x01,0x00,0xFE,0xFF,0x42,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x44,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x46,0x94,0x00,0x00,0xC3,0x83,0x00,0x00,0xFE,0xFF,0x48,0x94,0x00,0x00,0xC3,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };
        //static IEnumerable<byte> mybytes = new byte[] {
        //0xAA,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x06,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0xD4,0x04,0xD1,0x00,0x00,0x00,0x00,0x80,0x0C,0xFE,0x40,0x76,0xC1,0x02,0x22,0x76,0xA9,0x28,0x04,0xFF,0xBF,0x9B,0x1F,0x76,0x34,0x00,0x04,0x1E,0x1F,0x76,0x34,0x00,0x00,0x02,0x02,0x1E,0x1A,0x76,0x69,0xFF,0x40,0x76,0x72,0x00,0x1F,0x76,0x1C,0x00,0x0E,0x2B,0x08,0x2B,0x09,0x2B,0x06,0x2B,0x07,0x2B,0x0A,0x2B,0x0B,0x2B,0x0D,0x2B,0x10,0xC5,0x67,0x3E,0x48,0x96,0xEF,0xFF,0xA9,0x00,0xA9,0x1B,0x00,0x04,0x72,0x69,0x40,0x76,0x50,0x00,0x46,0x1E,0x4C,0x2B,0x38,0x6F,0x00,0x8F,0x00,0x81,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x4B,0x1B,0x00,0x04,0x10,0x66,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x4B,0x1B,0x00,0x04,0xF2,0x69,0x00,0x8F,0x00,0x04,0x42,0xA8,0x46,0x06,0x40,0x76,0x8A,0x00,0x00,0x52,0xE1,0xFF,0x84,0x00,0x00,0x8F,0x12,0x07,0x80,0x76,0x00,0x04,0x40,0x8F,0x00,0x81,0x42,0xA8,0xA6,0x06,0x46,0x8A,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x74,0x60,0x00,0x8F,0x00,0x04,0xA9,0xA8,0x46,0x07,0x46,0x1E,0x40,0x76,0x72,0x00,0x4C,0x0A,0x48,0x92,0xC9,0xFF,0x4C,0x54,0xC6,0x66,0x00,0x8F,0x00,0x81,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x0D,0x6F,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x48,0xCC,0xFF,0x03,0x4B,0x54,0xF1,0x67,0x48,0xCC,0xFF,0x03,0xA9,0x0E,0x42,0x1E,0x46,0x06,0x40,0x76,0x8A,0x00,0x00,0x52,0x49,0x61,0x00,0x8F,0x12,0x07,0x42,0xA8,0x40,0x8F,0x00,0x81,0x48,0xCC,0xFF,0x03,0x46,0x8A,0xA9,0x0E,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x3A,0x60,0x40,0x76,0x72,0x00,0x2F,0x6F,0x40,0x76,0x50,0x00,0x46,0x1E,0x00,0x8F,0x00,0x81,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x0D,0x6F,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x48,0x92,0x4B,0x54,0xF2,0x67,0x48,0x0E,0x42,0x1E,0x46,0x06,0x40,0x76,0x8A,0x00,0x00,0x52,0x18,0x61,0x00,0x8F,0x12,0x07,0x40,0x8F,0x00,0x81,0x42,0xA8,0x48,0x0E,0x46,0x8A,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x0B,0x60,0x40,0x76,0x72,0x00,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0x48,0x96,0x00,0x52,0xE0,0xFF,0x58,0xFF,0x8C,0xFE,0x06,0x00,0x01,0x19,0xC3,0x56,0xFF,0xFF,0x06,0x00,0x8F,0x04,0x00,0x00,0x50,0x00,0x02,0xFE,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0x01,0x29,0xA9,0x25,0x42,0x1E,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0xA9,0x0E,0x42,0x98,0x41,0x99,0x42,0x06,0x82,0xFE,0x06,0x00,0x02,0xFE,0xBF,0x56,0x41,0x01,0x41,0x92,0x08,0x52,0x09,0x66,0x1F,0x76,0x1C,0x00,0x10,0xC5,0x67,0x3E,0x41,0x0A,0x41,0x92,0x08,0x52,0xF9,0x69,0x82,0xFE,0x06,0x00,0x1F,0x76,0xC1,0x01,0x14,0x47,0xFD,0x6C,0x1F,0x76,0x1C,0x00,0x0C,0xC6,0x1F,0x76,0xC1,0x01,0x19,0x96,0x14,0x47,0xFF,0x6C,0x1F,0x76,0x1C,0x00,0x0C,0xCC,0x00,0xFF,0x1F,0x76,0xC1,0x01,0xC7,0xFF,0x19,0x96,0x1F,0x76,0x1C,0x00,0x0C,0x2B,0x06,0x00,0x04,0xFE,0x42,0x1E,0x43,0x2B,0x3E,0x8F,0x00,0x80,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xA0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x0E,0x92,0x09,0x60,0xBF,0x56,0x0E,0x01,0x80,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0x80,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3E,0x8F,0x00,0xA0,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x0E,0x92,0x09,0x60,0xBF,0x56,0x0E,0x01,0x80,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xA0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xC0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x08,0x92,0x09,0x60,0xBF,0x56,0x08,0x01,0x40,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0xA0,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3E,0x8F,0x00,0xC0,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x08,0x92,0x09,0x60,0xBF,0x56,0x08,0x01,0x40,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xC0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xE0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x09,0x92,0x09,0x60,0xBF,0x56,0x09,0x01,0x20,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0xC0,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3E,0x8F,0x00,0xE0,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x09,0x92,0x09,0x60,0xBF,0x56,0x09,0x01,0x20,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xE0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x00,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x06,0x92,0x09,0x60,0xBF,0x56,0x06,0x01,0x10,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0xE0,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x00,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x06,0x92,0x09,0x60,0xBF,0x56,0x06,0x01,0x10,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x00,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x20,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x07,0x92,0x09,0x60,0xBF,0x56,0x07,0x01,0x08,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x00,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x20,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x07,0x92,0x09,0x60,0xBF,0x56,0x07,0x01,0x08,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x20,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x40,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x0A,0x92,0x09,0x60,0xBF,0x56,0x0A,0x01,0x04,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x20,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x40,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x0A,0x92,0x09,0x60,0xBF,0x56,0x0A,0x01,0x04,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x40,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x60,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x0B,0x92,0x09,0x60,0xBF,0x56,0x0B,0x01,0x02,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x40,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x60,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x0B,0x92,0x09,0x60,0xBF,0x56,0x0B,0x01,0x02,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x60,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x80,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1C,0x00,0x0D,0x92,0x09,0x60,0xBF,0x56,0x0D,0x01,0x01,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x60,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x80,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1C,0x00,0x0D,0x92,0x09,0x60,0xBF,0x56,0x0D,0x01,0x01,0x9A,0x00,0x8F,0x12,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x43,0x92,0x03,0x60,0x01,0x9A,0x02,0x6F,0x00,0x9A,0x84,0xFE,0x06,0x00,0x40,0x76,0x28,0x02,0x22,0x76,0x1F,0x76,0xC0,0x01,0x1C,0x1A,0x08,0x00,0x69,0xFF,0xFD,0x76,0x80,0x7C,0x67,0x3E,0x1F,0x76,0xC0,0x01,0x1C,0x18,0xF7,0xFF,0x1A,0x76,0x69,0xFF,0x40,0x76,0xF2,0x02,0x0C,0x9A,0x02,0x9B,0x40,0x76,0x30,0x02,0x40,0x76,0x85,0x02,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x25,0x55,0xBF,0x56,0x25,0xAA,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x29,0x68,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x42,0x97,0x41,0x96,0x1F,0x76,0xC0,0x01,0x11,0x43,0x06,0x6C,0x22,0x76,0x11,0x1A,0x10,0x00,0x1A,0x76,0x25,0x76,0x11,0xCC,0x80,0x01,0xC6,0xFF,0x05,0x61,0x22,0x76,0x11,0x18,0x7F,0xFE,0x1A,0x76,0x41,0x0E,0xA6,0x1E,0x21,0x92,0x0F,0x90,0xA9,0x80,0xA6,0x06,0xA7,0x0F,0x16,0x61,0x22,0x76,0x11,0x1A,0x40,0x00,0x41,0x92,0x21,0xCD,0xF0,0xFF,0x0F,0x90,0xA8,0xCA,0x21,0x96,0x1A,0x76,0x69,0xFF,0x40,0x76,0x28,0x02,0x11,0x92,0x01,0x90,0x01,0x52,0xFD,0x60,0x22,0x76,0x11,0x18,0xBF,0xFF,0x1A,0x76,0x42,0x92,0x01,0x52,0x03,0x61,0x02,0x52,0x09,0x60,0x22,0x76,0x03,0x90,0x11,0xCD,0x7F,0xFE,0x86,0xFF,0xA8,0xCA,0x11,0x96,0x1A,0x76,0x42,0x92,0x03,0x52,0x12,0x60,0x22,0x76,0x11,0xCC,0x7F,0xFE,0xA9,0x1A,0x00,0x01,0x11,0x96,0x00,0x8F,0x56,0x02,0x69,0xFF,0xA9,0xA8,0x40,0x76,0xCD,0x80,0x1F,0x76,0xC0,0x01,0x11,0x1A,0x80,0x01,0x1A,0x76,0x69,0xFF,0x82,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x1B,0x02,0x10,0xCC,0xFC,0xFF,0x02,0x50,0x10,0x96,0x1C,0x1A,0x08,0x00,0x20,0x1A,0x01,0x00,0x20,0x1A,0x02,0x00,0x20,0x1A,0x04,0x00,0x1D,0x1A,0x00,0x01,0x1C,0x1A,0x00,0x40,0x1D,0x1A,0x00,0x40,0x1D,0x1A,0x01,0x00,0x1D,0x1A,0x02,0x00,0x1D,0x1A,0x04,0x00,0x1D,0x1A,0x08,0x00,0x1D,0x1A,0x10,0x00,0x1D,0x1A,0x20,0x00,0x1D,0x1A,0x40,0x00,0x1C,0x1A,0x01,0x00,0x1C,0x1A,0x10,0x00,0x1C,0x1A,0x02,0x00,0x20,0x1A,0x00,0x40,0x1C,0x1A,0x00,0x04,0x1C,0x1A,0x00,0x01,0x1C,0x1A,0x00,0x02,0x19,0x1A,0x00,0x01,0x19,0x1A,0x00,0x02,0x1C,0x1A,0x04,0x00,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x22,0x76,0x1F,0x76,0x2B,0x00,0x20,0x28,0xFF,0xFF,0x21,0x28,0xFF,0xFF,0x22,0x28,0xFF,0xFF,0x23,0x28,0xFF,0xFF,0x24,0x28,0xFF,0xFF,0x25,0x28,0xFF,0xFF,0x26,0x28,0xFF,0xFF,0x27,0x28,0xFF,0xFF,0x1A,0x76,0x1F,0x76,0xFF,0xFD,0x38,0x92,0x41,0x96,0x39,0x92,0x41,0x96,0x3A,0x92,0x41,0x96,0x3B,0x92,0x41,0x96,0x3C,0x92,0x41,0x96,0x3D,0x92,0x41,0x96,0x3E,0x92,0x41,0x96,0x3F,0x92,0x41,0x96,0x1F,0x76,0x2B,0x00,0x2F,0x40,0x03,0x6D,0x01,0x9A,0x02,0x6F,0x00,0x9A,0x69,0xFF,0x82,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xFE,0x12,0x18,0xFE,0xFF,0x12,0x1A,0x00,0x20,0x12,0x1A,0x00,0x40,0x12,0x1A,0x00,0x04,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xFB,0x12,0x1A,0x02,0x00,0x12,0x1A,0x00,0x20,0x12,0x1A,0x00,0x40,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xBF,0x00,0x8F,0xDD,0x2E,0x69,0xFF,0xA9,0xA8,0x40,0x76,0xCD,0x80,0x1F,0x76,0xC0,0x01,0x12,0x1A,0x00,0x20,0x12,0x18,0xFD,0xFF,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x1A,0x00,0x04,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x10,0x1A,0x40,0x00,0x12,0x1A,0x00,0x40,0x12,0x18,0xFF,0xDF,0x12,0x18,0xFD,0xFF,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x1A,0x00,0x04,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x1C,0x1A,0x00,0x04,0xBF,0x56,0x1B,0x02,0x1F,0x76,0xC1,0x01,0x1A,0x28,0x00,0x80,0xBF,0x56,0x10,0x07,0xBF,0x56,0x11,0x03,0x14,0x2B,0xBF,0x56,0x11,0x23,0x1F,0x76,0xBE,0x01,0x0D,0x18,0xFF,0xCF,0x09,0x1A,0x00,0x05,0x05,0x1A,0x00,0x03,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x1F,0x76,0xC1,0x01,0xBF,0x56,0x13,0x01,0x1C,0x1A,0x00,0x20,0x1C,0x1A,0x00,0x40,0x1C,0xCC,0x00,0x80,0xCE,0xFF,0x01,0x52,0xFC,0x60,0x1C,0x1A,0x00,0x40,0x1C,0x18,0xFF,0xDF,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x41,0x96,0x19,0x96,0x82,0xFE,0x06,0x00,0x02,0xFE,0x00,0x8F,0xC5,0x03,0x1F,0x76,0x1C,0x00,0x10,0xA8,0x40,0x76,0x48,0x03,0x40,0x76,0x65,0x03,0x1F,0x76,0x1C,0x00,0x0C,0x2B,0x40,0x76,0xC5,0x03,0xA9,0x88,0x00,0x8F,0xAA,0x08,0xA9,0xA8,0xA6,0x0F,0x04,0x61,0x3F,0x8F,0xF6,0x7F,0x09,0x6F,0x40,0x76,0x62,0x00,0x40,0x76,0x50,0x00,0x42,0x1E,0x40,0x76,0x00,0x80,0x42,0x8A,0xA9,0xA8,0x82,0xFE,0x06,0x00,0x02,0xFE,0x41,0x2B,0x42,0x2B,0x1F,0x76,0xC1,0x01,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFA,0x60,0x17,0xC6,0x41,0x96,0x19,0x96,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x42,0x96,0x19,0x96,0x1F,0x76,0x1C,0x00,0x41,0x92,0x0C,0x94,0x42,0x94,0x0C,0x96,0x03,0x56,0x42,0x08,0x41,0x98,0x41,0x92,0x82,0xFE,0x06,0x00,0x02,0xFE,0x41,0x2B,0x42,0x2B,0x1F,0x76,0xC1,0x01,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFA,0x60,0x17,0xC6,0x41,0x96,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x42,0x96,0x1F,0x76,0x1C,0x00,0x41,0x92,0x0C,0x94,0x42,0x94,0x0C,0x96,0x03,0x56,0x42,0x08,0x41,0x98,0x41,0x92,0x82,0xFE,0x06,0x00,0xAD,0x28,0xE0,0x04,0x69,0xFF,0x1F,0x56,0x16,0x56,0x1A,0x56,0x40,0x29,0x1F,0x76,0x00,0x00,0x02,0x29,0x1B,0x76,0x40,0x76,0xDC,0x04,0x00,0x52,0x42,0x61,0x22,0x76,0xA9,0x28,0x22,0x07,0xA8,0x28,0x00,0x00,0x01,0x09,0x1B,0x61,0xC0,0x76,0x22,0x07,0x04,0x29,0x0F,0x6F,0x00,0x9B,0xA9,0x24,0x01,0xDF,0x04,0x6C,0x04,0x29,0xA8,0x24,0x01,0xDF,0xA6,0x1E,0xA1,0xF7,0x86,0x24,0xA7,0x06,0xA1,0x81,0x01,0x09,0xA7,0x1E,0xA9,0x24,0x03,0x63,0x5C,0xFF,0x04,0x3B,0xA9,0x59,0x01,0xDF,0x09,0x00,0xEC,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0x01,0x09,0x05,0x61,0x3F,0x8F,0xFF,0xFF,0x40,0x76,0x61,0x04,0x1A,0x76,0x40,0x76,0xDE,0x04,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0x01,0x09,0x0E,0x61,0xFF,0x76,0xFF,0xFF,0x06,0x6F,0x01,0xDF,0xBD,0xC3,0xA7,0x1E,0x67,0x3E,0xBE,0xC5,0xA9,0x24,0x01,0xDF,0xA8,0x24,0x58,0xFF,0xF7,0x60,0x40,0x76,0xA2,0x04,0x40,0x76,0x3A,0x04,0x00,0x77,0x00,0x6F,0xBD,0xB2,0x1F,0x76,0x1C,0x00,0xA9,0x59,0x16,0x92,0x0D,0x61,0xAB,0x28,0xFF,0xFF,0xAA,0x28,0xFF,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0xAB,0x0F,0x03,0x61,0x7F,0x76,0xFF,0xFF,0x1F,0x76,0x1C,0x00,0x1C,0xC5,0x67,0x3E,0x1F,0x76,0x1C,0x00,0x1A,0xC5,0xA7,0x06,0x03,0x61,0xA1,0x92,0x67,0x3E,0x1F,0x76,0x1C,0x00,0x18,0x06,0x03,0x61,0xA7,0x1E,0x67,0x3E,0x40,0x76,0x38,0x04,0xBE,0x8B,0x06,0x00,0xBD,0xB2,0xBD,0xAA,0xBD,0xA2,0x08,0xFE,0xA4,0x82,0xCB,0x5A,0x00,0xD1,0x15,0x6F,0xAD,0x5C,0x01,0x29,0x03,0x56,0xA1,0x03,0x88,0xDC,0xA3,0x07,0xA4,0x5C,0x02,0x09,0xA9,0x83,0x08,0x02,0x40,0x76,0x85,0x04,0x42,0x06,0x06,0x61,0x44,0x8A,0x46,0x83,0x40,0x76,0x85,0x04,0xCB,0x5A,0x01,0xD9,0xA2,0x92,0xA1,0x54,0xEA,0x66,0x88,0xFE,0xBE,0x82,0xBE,0x86,0xBE,0x8B,0x06,0x00,0x00,0x52,0xAB,0xA8,0xA4,0xC5,0x07,0x61,0xA9,0x88,0x81,0xDE,0x85,0x5C,0x87,0x7C,0x0E,0x00,0xFE,0xFF,0xA9,0x88,0xA6,0x0F,0x0F,0x61,0x00,0x53,0x0D,0x61,0xFF,0x9D,0xA8,0x5C,0xBF,0x76,0xFE,0xFF,0x85,0x92,0x87,0x96,0x0E,0x00,0xFE,0xFF,0x85,0x92,0x87,0x96,0x0C,0x00,0xF8,0xFF,0xA4,0xA9,0x06,0x00,0xAB,0x28,0xFF,0xFF,0xAA,0x28,0xFF,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0xAB,0x0F,0x04,0x60,0x00,0xBE,0x00,0xD4,0x09,0x6F,0xA9,0x8A,0xA9,0x28,0xFF,0xFF,0xC4,0x88,0xA8,0x28,0xFF,0xFF,0x02,0x09,0xA9,0x8A,0xA6,0x92,0x40,0x76,0xBB,0x04,0x06,0x00,0x40,0x76,0x28,0x02,0x40,0x76,0xF2,0x02,0x0C,0x9A,0x02,0x9B,0x40,0x76,0x30,0x02,0x00,0x8F,0xAE,0x04,0xA9,0xA8,0x40,0x76,0xCD,0x80,0x40,0x76,0x81,0x03,0x06,0x00,0x1F,0x76,0x1C,0x00,0x1E,0xA8,0x06,0x00,0x1F,0x76,0x1C,0x00,0x1C,0xA8,0x06,0x00,0x06,0x00,0x1F,0x56,0x22,0x76,0xC0,0xB9,0x29,0x28,0x68,0x00,0x1A,0x76,0x40,0x00,0xE4,0x03,0x01,0x9A,0x06,0x00,0x06,0x00,0x26,0x00,0x00,0x00,0xE0,0x06,0xAD,0x28,0xE0,0x04,0x1F,0x56,0x16,0x56,0x1A,0x56,0x40,0x29,0x1F,0x76,0x00,0x00,0x02,0x29,0x69,0xFF,0x40,0x76,0xBB,0x04,0xCF,0x56,0x02,0x00,0xAD,0x28,0xE0,0x04,0xBD,0x2B,0xBD,0x2B,0xBD,0x1E,0x07,0x00,0x33,0x56,0xAC,0x1E,0xA9,0x58,0xA9,0x59,0xA9,0x5A,0xA9,0x5B,0xA9,0x5C,0xA9,0x5D,0xA9,0x88,0xA9,0x80,0x1F,0x76,0x00,0x00,0xBD,0x2B,0xBD,0x28,0x0B,0x0A,0x00,0x76,0x13,0x76,0x06,0x00,0x1A,0x00,0x00,0x00,0x22,0x07,0xFF,0xFF,0x16,0x07,0x00,0x00,0x01,0x00,0xFE,0xFF,0x18,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x1A,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x1C,0x07,0x00,0x00,0xD3,0x04,0x00,0x00,0xFE,0xFF,0x1E,0x07,0x00,0x00,0xD3,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        //};
        //static IEnumerable<byte> mybytes = new byte[] {
        //    0xAA,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB0,0x05,0x02,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0xD4,0x04,0xD1,0x00,0x00,0x00,0xDF,0x04,0x0C,0xFE,0x40,0x76,0xC1,0x02,0x22,0x76,0xA9,0x28,0x04,0xFF,0xBF,0x9B,0x1F,0x76,0x34,0x00,0x04,0x1E,0x1F,0x76,0x34,0x00,0x00,0x02,0x02,0x1E,0x1A,0x76,0x69,0xFF,0x40,0x76,0x72,0x00,0x1F,0x76,0x1E,0x00,0x08,0x2B,0x02,0x2B,0x03,0x2B,0x00,0x2B,0x01,0x2B,0x04,0x2B,0x05,0x2B,0x07,0x2B,0x0A,0xC5,0x67,0x3E,0x48,0x96,0xEF,0xFF,0xA9,0x00,0xA9,0x1B,0x00,0x04,0x72,0x69,0x40,0x76,0x50,0x00,0x46,0x1E,0x4C,0x2B,0x38,0x6F,0x00,0x8F,0x00,0x80,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x4B,0x1B,0x00,0x04,0x10,0x66,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x4B,0x1B,0x00,0x04,0xF2,0x69,0x00,0x8F,0x00,0x04,0x42,0xA8,0x46,0x06,0x40,0x76,0x8A,0x00,0x00,0x52,0xE1,0xFF,0x84,0x00,0x00,0x8F,0x8C,0x07,0x80,0x76,0x00,0x04,0x40,0x8F,0x00,0x80,0x42,0xA8,0xA6,0x06,0x46,0x8A,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x74,0x60,0x00,0x8F,0x00,0x04,0xA9,0xA8,0x46,0x07,0x46,0x1E,0x40,0x76,0x72,0x00,0x4C,0x0A,0x48,0x92,0xC9,0xFF,0x4C,0x54,0xC6,0x66,0x00,0x8F,0x00,0x80,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x0D,0x6F,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x48,0xCC,0xFF,0x03,0x4B,0x54,0xF1,0x67,0x48,0xCC,0xFF,0x03,0xA9,0x0E,0x42,0x1E,0x46,0x06,0x40,0x76,0x8A,0x00,0x00,0x52,0x49,0x61,0x00,0x8F,0x8C,0x07,0x42,0xA8,0x40,0x8F,0x00,0x80,0x48,0xCC,0xFF,0x03,0x46,0x8A,0xA9,0x0E,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x3A,0x60,0x40,0x76,0x72,0x00,0x2F,0x6F,0x40,0x76,0x50,0x00,0x46,0x1E,0x00,0x8F,0x00,0x80,0x44,0xA8,0xBF,0x56,0x4B,0x01,0x0D,0x6F,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0x49,0x96,0x44,0xC5,0xA7,0x06,0x01,0x09,0x44,0x1E,0x49,0x92,0xC7,0x96,0x4B,0x0A,0x48,0x92,0x4B,0x54,0xF2,0x67,0x48,0x0E,0x42,0x1E,0x46,0x06,0x40,0x76,0x8A,0x00,0x00,0x52,0x18,0x61,0x00,0x8F,0x8C,0x07,0x40,0x8F,0x00,0x80,0x42,0xA8,0x48,0x0E,0x46,0x8A,0x7F,0x76,0xD2,0xF8,0x4A,0x96,0x01,0x6F,0x00,0x52,0x0B,0x60,0x40,0x76,0x72,0x00,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0x48,0x96,0x00,0x52,0xE0,0xFF,0x58,0xFF,0x8C,0xFE,0x06,0x00,0x01,0x19,0xC3,0x56,0xFF,0xFF,0x06,0x00,0x8F,0x04,0x00,0x00,0x50,0x00,0x02,0xFE,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0x01,0x29,0xA9,0x25,0x42,0x1E,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0xA9,0x0E,0x42,0x98,0x41,0x99,0x42,0x06,0x82,0xFE,0x06,0x00,0x02,0xFE,0xBF,0x56,0x41,0x01,0x41,0x92,0x08,0x52,0x09,0x66,0x1F,0x76,0x1E,0x00,0x0A,0xC5,0x67,0x3E,0x41,0x0A,0x41,0x92,0x08,0x52,0xF9,0x69,0x82,0xFE,0x06,0x00,0x1F,0x76,0xC1,0x01,0x14,0x47,0xFD,0x6C,0x1F,0x76,0x1E,0x00,0x06,0xC6,0x1F,0x76,0xC1,0x01,0x19,0x96,0x14,0x47,0xFF,0x6C,0x1F,0x76,0x1E,0x00,0x06,0xCC,0x00,0xFF,0x1F,0x76,0xC1,0x01,0xC7,0xFF,0x19,0x96,0x1F,0x76,0x1E,0x00,0x06,0x2B,0x06,0x00,0x04,0xFE,0x42,0x1E,0x43,0x2B,0x3E,0x8F,0x00,0x80,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xA0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x08,0x92,0x09,0x60,0xBF,0x56,0x08,0x01,0x80,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0x80,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3E,0x8F,0x00,0xA0,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x08,0x92,0x09,0x60,0xBF,0x56,0x08,0x01,0x80,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xA0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xC0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x02,0x92,0x09,0x60,0xBF,0x56,0x02,0x01,0x40,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0xA0,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3E,0x8F,0x00,0xC0,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x02,0x92,0x09,0x60,0xBF,0x56,0x02,0x01,0x40,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xC0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3E,0x8F,0x00,0xE0,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x03,0x92,0x09,0x60,0xBF,0x56,0x03,0x01,0x20,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0xC0,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3E,0x8F,0x00,0xE0,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x03,0x92,0x09,0x60,0xBF,0x56,0x03,0x01,0x20,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3E,0x8F,0x00,0xE0,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x00,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x00,0x92,0x09,0x60,0xBF,0x56,0x00,0x01,0x10,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3E,0x8F,0x00,0xE0,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x00,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x00,0x92,0x09,0x60,0xBF,0x56,0x00,0x01,0x10,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x00,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x20,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x01,0x92,0x09,0x60,0xBF,0x56,0x01,0x01,0x08,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x00,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x20,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x01,0x92,0x09,0x60,0xBF,0x56,0x01,0x01,0x08,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x20,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x40,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x04,0x92,0x09,0x60,0xBF,0x56,0x04,0x01,0x04,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x20,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x40,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x04,0x92,0x09,0x60,0xBF,0x56,0x04,0x01,0x04,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x40,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x60,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x05,0x92,0x09,0x60,0xBF,0x56,0x05,0x01,0x02,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x40,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x60,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x05,0x92,0x09,0x60,0xBF,0x56,0x05,0x01,0x02,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x3F,0x8F,0x00,0x60,0xA9,0xA8,0x42,0x0F,0x12,0x66,0x3F,0x8F,0x00,0x80,0xA9,0xA8,0x42,0x0F,0x0D,0x69,0x1F,0x76,0x1E,0x00,0x07,0x92,0x09,0x60,0xBF,0x56,0x07,0x01,0x01,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x48,0x06,0x3F,0x8F,0x00,0x60,0x42,0x07,0xA4,0x0F,0x13,0x69,0x48,0x06,0x3F,0x8F,0x00,0x80,0x42,0x07,0xA4,0x0F,0x0D,0x66,0x1F,0x76,0x1E,0x00,0x07,0x92,0x09,0x60,0xBF,0x56,0x07,0x01,0x01,0x9A,0x00,0x8F,0x8C,0x07,0x7F,0x76,0xB3,0xF9,0x43,0x96,0x43,0x92,0x03,0x60,0x01,0x9A,0x02,0x6F,0x00,0x9A,0x84,0xFE,0x06,0x00,0x40,0x76,0x28,0x02,0x22,0x76,0x1F,0x76,0xC0,0x01,0x1C,0x1A,0x08,0x00,0x69,0xFF,0xFD,0x76,0x80,0x7C,0x67,0x3E,0x1F,0x76,0xC0,0x01,0x1C,0x18,0xF7,0xFF,0x1A,0x76,0x69,0xFF,0x40,0x76,0xF2,0x02,0x0C,0x9A,0x02,0x9B,0x40,0x76,0x30,0x02,0x40,0x76,0x85,0x02,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x25,0x55,0xBF,0x56,0x25,0xAA,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x29,0x68,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x42,0x97,0x41,0x96,0x1F,0x76,0xC0,0x01,0x11,0x43,0x06,0x6C,0x22,0x76,0x11,0x1A,0x10,0x00,0x1A,0x76,0x25,0x76,0x11,0xCC,0x80,0x01,0xC6,0xFF,0x05,0x61,0x22,0x76,0x11,0x18,0x7F,0xFE,0x1A,0x76,0x41,0x0E,0xA6,0x1E,0x21,0x92,0x0F,0x90,0xA9,0x80,0xA6,0x06,0xA7,0x0F,0x16,0x61,0x22,0x76,0x11,0x1A,0x40,0x00,0x41,0x92,0x21,0xCD,0xF0,0xFF,0x0F,0x90,0xA8,0xCA,0x21,0x96,0x1A,0x76,0x69,0xFF,0x40,0x76,0x28,0x02,0x11,0x92,0x01,0x90,0x01,0x52,0xFD,0x60,0x22,0x76,0x11,0x18,0xBF,0xFF,0x1A,0x76,0x42,0x92,0x01,0x52,0x03,0x61,0x02,0x52,0x09,0x60,0x22,0x76,0x03,0x90,0x11,0xCD,0x7F,0xFE,0x86,0xFF,0xA8,0xCA,0x11,0x96,0x1A,0x76,0x42,0x92,0x03,0x52,0x12,0x60,0x22,0x76,0x11,0xCC,0x7F,0xFE,0xA9,0x1A,0x00,0x01,0x11,0x96,0x00,0x8F,0x56,0x02,0x69,0xFF,0xA9,0xA8,0x40,0x76,0xAC,0x05,0x1F,0x76,0xC0,0x01,0x11,0x1A,0x80,0x01,0x1A,0x76,0x69,0xFF,0x82,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0xBF,0x56,0x1B,0x02,0x10,0xCC,0xFC,0xFF,0x02,0x50,0x10,0x96,0x1C,0x1A,0x08,0x00,0x20,0x1A,0x01,0x00,0x20,0x1A,0x02,0x00,0x20,0x1A,0x04,0x00,0x1D,0x1A,0x00,0x01,0x1C,0x1A,0x00,0x40,0x1D,0x1A,0x00,0x40,0x1D,0x1A,0x01,0x00,0x1D,0x1A,0x02,0x00,0x1D,0x1A,0x04,0x00,0x1D,0x1A,0x08,0x00,0x1D,0x1A,0x10,0x00,0x1D,0x1A,0x20,0x00,0x1D,0x1A,0x40,0x00,0x1C,0x1A,0x01,0x00,0x1C,0x1A,0x10,0x00,0x1C,0x1A,0x02,0x00,0x20,0x1A,0x00,0x40,0x1C,0x1A,0x00,0x04,0x1C,0x1A,0x00,0x01,0x1C,0x1A,0x00,0x02,0x19,0x1A,0x00,0x01,0x19,0x1A,0x00,0x02,0x1C,0x1A,0x04,0x00,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x22,0x76,0x1F,0x76,0x2B,0x00,0x20,0x28,0xFF,0xFF,0x21,0x28,0xFF,0xFF,0x22,0x28,0xFF,0xFF,0x23,0x28,0xFF,0xFF,0x24,0x28,0xFF,0xFF,0x25,0x28,0xFF,0xFF,0x26,0x28,0xFF,0xFF,0x27,0x28,0xFF,0xFF,0x1A,0x76,0x1F,0x76,0xFF,0xFD,0x38,0x92,0x41,0x96,0x39,0x92,0x41,0x96,0x3A,0x92,0x41,0x96,0x3B,0x92,0x41,0x96,0x3C,0x92,0x41,0x96,0x3D,0x92,0x41,0x96,0x3E,0x92,0x41,0x96,0x3F,0x92,0x41,0x96,0x1F,0x76,0x2B,0x00,0x2F,0x40,0x03,0x6D,0x01,0x9A,0x02,0x6F,0x00,0x9A,0x69,0xFF,0x82,0xFE,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xFE,0x12,0x18,0xFE,0xFF,0x12,0x1A,0x00,0x20,0x12,0x1A,0x00,0x40,0x12,0x1A,0x00,0x04,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xFB,0x12,0x1A,0x02,0x00,0x12,0x1A,0x00,0x20,0x12,0x1A,0x00,0x40,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x12,0x18,0xFF,0xBF,0x00,0x8F,0xDD,0x2E,0x69,0xFF,0xA9,0xA8,0x40,0x76,0xAC,0x05,0x1F,0x76,0xC0,0x01,0x12,0x1A,0x00,0x20,0x12,0x18,0xFD,0xFF,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x1A,0x00,0x04,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x10,0x1A,0x40,0x00,0x12,0x1A,0x00,0x40,0x12,0x18,0xFF,0xDF,0x12,0x18,0xFD,0xFF,0x12,0x1A,0x01,0x00,0x12,0x18,0xFB,0xFF,0x12,0x1A,0x00,0x04,0x12,0x18,0xFF,0xFE,0x1A,0x76,0x69,0xFF,0x06,0x00,0x22,0x76,0x1F,0x76,0xC0,0x01,0x1C,0x1A,0x00,0x04,0xBF,0x56,0x1B,0x02,0x1F,0x76,0xC1,0x01,0x1A,0x28,0x00,0x80,0xBF,0x56,0x10,0x07,0xBF,0x56,0x11,0x03,0x14,0x2B,0xBF,0x56,0x11,0x23,0x1F,0x76,0xBE,0x01,0x0D,0x18,0xFF,0xCF,0x09,0x1A,0x00,0x05,0x05,0x1A,0x00,0x03,0x1A,0x76,0x69,0xFF,0x06,0x00,0x02,0xFE,0x1F,0x76,0xC1,0x01,0xBF,0x56,0x13,0x01,0x1C,0x1A,0x00,0x20,0x1C,0x1A,0x00,0x40,0x1C,0xCC,0x00,0x80,0xCE,0xFF,0x01,0x52,0xFC,0x60,0x1C,0x1A,0x00,0x40,0x1C,0x18,0xFF,0xDF,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x41,0x96,0x19,0x96,0x82,0xFE,0x06,0x00,0x02,0xFE,0x00,0x8F,0xC5,0x03,0x1F,0x76,0x1E,0x00,0x0A,0xA8,0x40,0x76,0x48,0x03,0x40,0x76,0x65,0x03,0x1F,0x76,0x1E,0x00,0x06,0x2B,0x40,0x76,0xC5,0x03,0xA9,0x88,0x00,0x8F,0xAA,0x08,0xA9,0xA8,0xA6,0x0F,0x04,0x61,0x3F,0x8F,0xF6,0x7F,0x09,0x6F,0x40,0x76,0x62,0x00,0x40,0x76,0x50,0x00,0x42,0x1E,0x40,0x76,0xDF,0x04,0x42,0x8A,0xA9,0xA8,0x82,0xFE,0x06,0x00,0x02,0xFE,0x41,0x2B,0x42,0x2B,0x1F,0x76,0xC1,0x01,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFA,0x60,0x17,0xC6,0x41,0x96,0x19,0x96,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x42,0x96,0x19,0x96,0x1F,0x76,0x1E,0x00,0x41,0x92,0x06,0x94,0x42,0x94,0x06,0x96,0x03,0x56,0x42,0x08,0x41,0x98,0x41,0x92,0x82,0xFE,0x06,0x00,0x02,0xFE,0x41,0x2B,0x42,0x2B,0x1F,0x76,0xC1,0x01,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFA,0x60,0x17,0xC6,0x41,0x96,0x15,0xCC,0x40,0x00,0xC5,0xFF,0x01,0x52,0xFC,0x60,0x17,0xC6,0x42,0x96,0x1F,0x76,0x1E,0x00,0x41,0x92,0x06,0x94,0x42,0x94,0x06,0x96,0x03,0x56,0x42,0x08,0x41,0x98,0x41,0x92,0x82,0xFE,0x06,0x00,0xAD,0x28,0x80,0x04,0x69,0xFF,0x1F,0x56,0x16,0x56,0x1A,0x56,0x40,0x29,0x1F,0x76,0x00,0x00,0x02,0x29,0x1B,0x76,0x40,0x76,0xDC,0x04,0x00,0x52,0x42,0x61,0x22,0x76,0xA9,0x28,0xD6,0x05,0xA8,0x28,0x00,0x00,0x01,0x09,0x1B,0x61,0xC0,0x76,0xD6,0x05,0x04,0x29,0x0F,0x6F,0x00,0x9B,0xA9,0x24,0x01,0xDF,0x04,0x6C,0x04,0x29,0xA8,0x24,0x01,0xDF,0xA6,0x1E,0xA1,0xF7,0x86,0x24,0xA7,0x06,0xA1,0x81,0x01,0x09,0xA7,0x1E,0xA9,0x24,0x03,0x63,0x5C,0xFF,0x04,0x3B,0xA9,0x59,0x01,0xDF,0x09,0x00,0xEC,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0x01,0x09,0x05,0x61,0x3F,0x8F,0xFF,0xFF,0x40,0x76,0x61,0x04,0x1A,0x76,0x40,0x76,0xDE,0x04,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0x01,0x09,0x0E,0x61,0xFF,0x76,0xFF,0xFF,0x06,0x6F,0x01,0xDF,0xBD,0xC3,0xA7,0x1E,0x67,0x3E,0xBE,0xC5,0xA9,0x24,0x01,0xDF,0xA8,0x24,0x58,0xFF,0xF7,0x60,0x40,0x76,0xA2,0x04,0x40,0x76,0x3A,0x04,0x00,0x77,0x00,0x6F,0xBD,0xB2,0x1F,0x76,0x1E,0x00,0xA9,0x59,0x10,0x92,0x0D,0x61,0xAB,0x28,0xFF,0xFF,0xAA,0x28,0xFF,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0xAB,0x0F,0x03,0x61,0x7F,0x76,0xFF,0xFF,0x1F,0x76,0x1E,0x00,0x16,0xC5,0x67,0x3E,0x1F,0x76,0x1E,0x00,0x14,0xC5,0xA7,0x06,0x03,0x61,0xA1,0x92,0x67,0x3E,0x1F,0x76,0x1E,0x00,0x12,0x06,0x03,0x61,0xA7,0x1E,0x67,0x3E,0x40,0x76,0x38,0x04,0xBE,0x8B,0x06,0x00,0xBD,0xB2,0xBD,0xAA,0xBD,0xA2,0x08,0xFE,0xA4,0x82,0xCB,0x5A,0x00,0xD1,0x15,0x6F,0xAD,0x5C,0x01,0x29,0x03,0x56,0xA1,0x03,0x88,0xDC,0xA3,0x07,0xA4,0x5C,0x02,0x09,0xA9,0x83,0x08,0x02,0x40,0x76,0x85,0x04,0x42,0x06,0x06,0x61,0x44,0x8A,0x46,0x83,0x40,0x76,0x85,0x04,0xCB,0x5A,0x01,0xD9,0xA2,0x92,0xA1,0x54,0xEA,0x66,0x88,0xFE,0xBE,0x82,0xBE,0x86,0xBE,0x8B,0x06,0x00,0x00,0x52,0xAB,0xA8,0xA4,0xC5,0x07,0x61,0xA9,0x88,0x81,0xDE,0x85,0x5C,0x87,0x7C,0x0E,0x00,0xFE,0xFF,0xA9,0x88,0xA6,0x0F,0x0F,0x61,0x00,0x53,0x0D,0x61,0xFF,0x9D,0xA8,0x5C,0xBF,0x76,0xFE,0xFF,0x85,0x92,0x87,0x96,0x0E,0x00,0xFE,0xFF,0x85,0x92,0x87,0x96,0x0C,0x00,0xF8,0xFF,0xA4,0xA9,0x06,0x00,0xAB,0x28,0xFF,0xFF,0xAA,0x28,0xFF,0xFF,0xA9,0x28,0xFF,0xFF,0xA8,0x28,0xFF,0xFF,0xAB,0x0F,0x04,0x60,0x00,0xBE,0x00,0xD4,0x09,0x6F,0xA9,0x8A,0xA9,0x28,0xFF,0xFF,0xC4,0x88,0xA8,0x28,0xFF,0xFF,0x02,0x09,0xA9,0x8A,0xA6,0x92,0x40,0x76,0xBB,0x04,0x06,0x00,0x40,0x76,0x28,0x02,0x40,0x76,0xF2,0x02,0x0C,0x9A,0x02,0x9B,0x40,0x76,0x30,0x02,0x00,0x8F,0xAE,0x04,0xA9,0xA8,0x40,0x76,0xAC,0x05,0x40,0x76,0x81,0x03,0x06,0x00,0x1F,0x76,0x1E,0x00,0x18,0xA8,0x06,0x00,0x1F,0x76,0x1E,0x00,0x16,0xA8,0x06,0x00,0x06,0x00,0x1F,0x56,0x22,0x76,0xC0,0xB9,0x29,0x28,0x68,0x00,0x1A,0x76,0x40,0x00,0xE4,0x03,0x01,0x9A,0x06,0x00,0x06,0x00,0x26,0x00,0x00,0x00,0xB0,0x05,0xAD,0x28,0x80,0x04,0x1F,0x56,0x16,0x56,0x1A,0x56,0x40,0x29,0x1F,0x76,0x00,0x00,0x02,0x29,0x69,0xFF,0x40,0x76,0xBB,0x04,0xCF,0x56,0x02,0x00,0xAD,0x28,0x80,0x04,0xBD,0x2B,0xBD,0x2B,0xBD,0x1E,0x07,0x00,0x33,0x56,0xAC,0x1E,0xA9,0x58,0xA9,0x59,0xA9,0x5A,0xA9,0x5B,0xA9,0x5C,0xA9,0x5D,0xA9,0x88,0xA9,0x80,0x1F,0x76,0x00,0x00,0xBD,0x2B,0xBD,0x28,0x0B,0x0A,0x00,0x76,0x13,0x76,0x06,0x00,0x1A,0x00,0x00,0x00,0xD6,0x05,0xFF,0xFF,0x90,0x07,0x00,0x00,0x01,0x00,0xFE,0xFF,0x92,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x94,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x96,0x07,0x00,0x00,0xD3,0x04,0x00,0x00,0xFE,0xFF,0x98,0x07,0x00,0x00,0xD3,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        //};
        // List<byte> fileBytes = new List<byte>(mybytes);
        List<byte> fileBytes = new List<byte>();

        UInt16 calculatedchecksum;

        public FirmwareDownloadPage(bool alreadyTalkingToBootloader = false)
        {
            try
            {
                InitializeComponent();
                //AddActivityPopUp();
                LoadCommunicationItemsTAC();
                //Only show software for specific matching profiles
                if (App.AppConfigurationLevel == "USER") //kind of disabled for now since USERs don't get this screen
                {//possibly if the cloud accessLists enable this screen for USERs then this make total sense and reduces possibilities of downloading wrong code
                    if (App.ViewModelLocator.GetParameter("PARPROFILENUMBER").parameterValue != 32767f)
                    {//must be in boot load or version does not follow the lower 2 digits as a profile(TODO: for future compatibilty, only 100 profiles presently)
                        var text = FileButtonList.Children.Where(x => x.GetType() == typeof(Frame));
                        if (text.Count() != 0)
                        {
                            foreach (Frame element in text)
                            {
                                if (element.Content is Button && (element.Content as Button).Text.Contains(" v"))
                                {//remove everything in the button text up space v then get the number then get the bottom 2 digits and compare to profile number
                                    string thing = Regex.Replace((element.Content as Button).Text, @"[\s\S].*(.|\n)*(?= v)", "");
                                    if ((float)Math.Round((((float.Parse(Regex.Match(thing, @"\d+((.|,)\d+)").Value))) % 0.100f) * 1000f) == App.ViewModelLocator.GetParameter("PARPROFILENUMBER").parameterValue)
                                        element.IsVisible = true;
                                    else
                                        element.IsVisible = false;
                                }
                            }
                        }
                    }
                }
                AlreadyTalkingToBootloader = alreadyTalkingToBootloader;
                Device.BeginInvokeOnMainThread(async () =>
                {
                    float softwareRevision = App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue;
                    if (!AlreadyTalkingToBootloader && softwareRevision >= 4.000)
                    {
                        await ReadOneParameter(App.ViewModelLocator.GetParameter("MAXCURRENT"));
                    }
                    await GetSupplierChainObject(AlreadyTalkingToBootloader, softwareRevision);
                    InsertFileList();

                    //HardCoding table
                    //await ReadOneParameter(App.ViewModelLocator.GetParameter("Development_1"));

                    //Cloud
                    //if (App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue >= 99.0)
                    //{
                    //    await ReadOneParameter(App.ViewModelLocator.GetParameter("DEBUGVAR2"));
                    //    await ReadOneParameter(App.ViewModelLocator.GetParameter("DEBUGVAR3"));
                    //    await ReadOneParameter(App.ViewModelLocator.GetParameter("DEBUGVAR4")); 
                    //}
                });

            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("Debug this exception: FirmwareDownloadPage.xaml.cs" + ex.Message);
            }

        }

        protected override void OnAppearing()
        {
            base.OnAppearing();
            Device.BeginInvokeOnMainThread(() =>
            {
                DeviceDisplay.KeepScreenOn = true;
            });
        }
        async protected override void OnDisappearing()
        {//this is a navigation screen so clean up added comm buffers
            while (App._devicecommunication.GetUniqueIdToBeRemoved() != 0)
                await Task.Delay(10); //TODO:Flag this as an issue if it happens
            App._devicecommunication.SetUniqueIdToBeRemoved(pageUniqueId);
            while (App._devicecommunication.GetUniqueIdToBeRemoved() != 0)
                await Task.Delay(10); ; //be nice and free up the thread

            base.OnDisappearing();
            Device.BeginInvokeOnMainThread(() =>
            {
                DeviceDisplay.KeepScreenOn = false;
            });
        }


        public bool AlreadyTalkingToBootloader = false;

        byte bReturnByte;
        byte bSecondReturnByte;
        volatile bool bResponseHandShake;
        ushort blockandaddresschecksum;
        UInt16 NumberOfWords = 0;
        List<byte> list = null;
        List<ushort> checksums = null;
        UInt32 DestAddr = 0;
        UInt16 readchecksum;
        bool BlockFromEntering = false;
        bool isDoneFlashing = false;
        float BlockPercentComplete = 0;
        ObservableCollection<ParameterFileItem> backupParameters;
        ObservableCollection<ParameterFileItem> diffParameters;
        ObservableCollection<ParameterFileItem> FileParameters;
        async void Download()
        {
#if DOWNLOAD_TESTING
            for (UInt16 Downloadcount = 0; Downloadcount < 100; Downloadcount++)
            {
#endif
            if (!BlockFromEntering)
            {
                BlockFromEntering = true;
                StreamReader reader = null;
                byte NumberOfBytes = 0;
                UInt16 DataIndex = 0;
                int NumberOfCharsRead = 0;
                //int NumberOfBlocksProgrammed = 0;
                float PercentComplete;
                string strDestAddr = null;
                float dFileLength;
                String line;
                char[] LineConvertedToCharArray;
                UInt16 WordToSend;
                byte ByteToSend;

#if DOWNLOAD_TESTING
                    if (Downloadcount%2 == 0)
                        strFileName = "/storage/emulated/0/Android/data/com.goi_inc.navitas/files/Navitas/Columbia_600A_Gen4_3kW_v5.751.hex";
                    else
                        strFileName = "/storage/emulated/0/Android/data/com.goi_inc.navitas/files/Navitas/CLUB_CAR_600A_4KW_HuaSheng_v8.017.hex";
#endif
                calculatedchecksum = 0;
#if TEST_BOOTLOADER
#else
                isDoneFlashing = false;
                UpdateProgressBar(0.0f);
                UpdateBlocksProgressBar(0.0f);

                if (!AlreadyTalkingToBootloader)
                {
                    WriteProgressLabel("Backing up parameters Please Wait...");
                    await BackupDiffParameters();

                    WriteProgressLabel("Dropping to boot");
                    if (App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue < 6.300)
                        QueParameter(new SetParameterEventArgs(109, 1.0f, null));
                    else //RG Oct 2021, controller firmware change so that old Apps cannot downgrade firmware version
                        QueParameter(new SetParameterEventArgs(109, 2.0f, null));

                    await Task.Delay(2000); //RG Aug 2020, changed from 1000 to 1=2000 just to augment the retry fix below
                    WriteByteWithResponse((byte)'A');
                    if (bReturnByte == (byte)'A')
                    {
                        //WriteProgressLabel("Auto Baud...  Success");

                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine("Returned byte not 'A' but is '" + bReturnByte + "' so we are retrying");
                        WriteByteWithResponse((byte)'A');
                        if (bReturnByte == (byte)'A')
                        {
                            //WriteProgressLabel("Auto Baud...  Success");

                        }
                        else
                        {
                            WriteProgressLabel("Boot initial connection failed. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                            // put up message box if we fail here. 
                            return;
                        }
                    }
                }

                //      WriteProgressLabel("Auto Baud...");

                //  bReturnByte = 0;
                //  while(bReturnByte != (byte)'A')
#if DOWNLOAD_TESTING
                    WriteProgressLabel("Step 1 of 2 Bootloading Please Wait Count =" + (Downloadcount + 1).ToString());
#else
                WriteProgressLabel("Step 1 of 2 Bootloading Please Wait");
#endif

                //string text = System.IO.File.ReadAllText("C:\\LocalRepo\\f2803x_flash_kernel.txt"");
                Stream BootStream = FileManager.GetExternalFirstOrInternalFileStream("f2803x_flash_kernel.txt");

                if (BootStream != null)
                {
                    StreamReader Bootreader = new System.IO.StreamReader(BootStream);
                    string BootString = Bootreader.ReadToEnd();

                    BootString = BootString.Replace("\r\n", string.Empty);
                    BootString = BootString.Replace("\u0002", "");
                    BootString = BootString.Replace("\u0003", "");
                    //List<byte> mybytes = new List<byte>();
                    var y = BootString.Split(' ');
                    foreach (var x in y)
                    {
                        try
                        {
                            if (x != "")
                                fileBytes.Add(byte.Parse(x, System.Globalization.NumberStyles.AllowHexSpecifier));
                        }
                        catch (Exception e)
                        {

                        }
                    }
                    //parse space delimited hex byte text into byte array
                    //  
                }

                int i20BlockIndex;
                int iNumberOf20byteBlocks = (fileBytes.Count / 20);
                int iFileIndex;
                //     System.Diagnostics.Debug.WriteLine("fileBytes.Count / 20 " + (fileBytes.Count / 20).ToString());
                for (i20BlockIndex = 0; i20BlockIndex < iNumberOf20byteBlocks; i20BlockIndex++)
                {
                    iFileIndex = i20BlockIndex * 20;
                    Write20BytesWithResponse(fileBytes.GetRange(iFileIndex, 20));
                    if (bReturnByte != fileBytes[iFileIndex])
                    {
                        System.Diagnostics.Debug.WriteLine("Echo Failed Index = " + i20BlockIndex.ToString() + " readbyte = " + bReturnByte.ToString("X") + " fileBytes[iFileIndex] = " + fileBytes[iFileIndex].ToString("X"));
                        WriteProgressLabel("Echo Failed. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");// Index = " + i20BlockIndex.ToString() + " readbyte = " + bReturnByte.ToString("X") + " fileBytes[iFileIndex] = " + fileBytes[iFileIndex].ToString("X"));
                        return;
                    }
                    PercentComplete = (float)(iFileIndex) / (float)(fileBytes.Count);
#if CONSOLE_WRITE
                       System.Diagnostics.Debug.WriteLine("PercentComplete = " + PercentComplete.ToString() + " (iBoot20Index * 20) = " + (iFileIndex).ToString());
#endif

                    if ((PercentComplete - progressBar.Progress) > 0.01)
                        Device.BeginInvokeOnMainThread(() =>
                        {


                            progressBar.Progress = PercentComplete;

                        });
                }
                iFileIndex = i20BlockIndex * 20;
                if ((fileBytes.Count - (iFileIndex)) > 0)
                {
                    int iNumberOfBytesLeftOver = fileBytes.Count - iFileIndex;
                    Write20BytesWithResponse(fileBytes.GetRange(iFileIndex, iNumberOfBytesLeftOver));
                    if (bReturnByte != fileBytes[iFileIndex])
                    {
                        System.Diagnostics.Debug.WriteLine("Echo Failed Index = " + i20BlockIndex.ToString() + " readbyte = " + bReturnByte.ToString("X") + " fileBytes[iFileIndex] = " + fileBytes[iFileIndex].ToString("X"));
                        WriteProgressLabel("Echo Failed. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");// Index = " + i20BlockIndex.ToString() + " readbyte = " + bReturnByte.ToString("X") + " fileBytes[iFileIndex] = " + fileBytes[iFileIndex].ToString("X"));
                        return;
                    }

                    PercentComplete = (float)(iFileIndex + iNumberOfBytesLeftOver) / (float)(fileBytes.Count);
#if CONSOLE_WRITE
                        System.Diagnostics.Debug.WriteLine("PercentComplete = " + PercentComplete.ToString() + " (iFileIndex + iNumberOfBytesLeftOver) = " + (iFileIndex + iNumberOfBytesLeftOver).ToString());
#endif

                    if ((PercentComplete - progressBar.Progress) > 0.01)
                        Device.BeginInvokeOnMainThread(() =>
                        {


                            progressBar.Progress = PercentComplete;

                        });

                }
                fileBytes.Clear();
                progressTimedUpdate();
#endif
#if DOWNLOAD_TESTING
                    WriteProgressLabel("Step 2 of 2 Please Wait Count =" + (Downloadcount + 1).ToString());
#else
                WriteProgressLabel("Step 2 of 2 Please Wait");
#endif
                WriteByteWithResponse((byte)'A');
                if (bReturnByte != 'A')
                {
                    isDoneFlashing = true;
                    WriteProgressLabel("Fail. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                }

                //          WriteProgressLabel("Success");

                //        WriteProgressLabel("Writing Key");

                calculatedchecksum = 0;
                WriteByteWithNoResponse(0xAA);
                WriteByteWithNoResponse(0x08);

                for (int i = 0; i < 16; i++)
                {
                    WriteByteWithNoResponse(0x00);
                }

                //      WriteProgressLabel("Writing Entry Point");

                //  was 003f5813  Program entry point working ???. This is now the flash startup vector
                WriteByteWithNoResponse(0x3f);
                WriteByteWithNoResponse(0x00);
                WriteByteWithNoResponse(0xF6);
                WriteByteWithResponse(0x7F);
                readchecksum = bReturnByte;

                readchecksum |= (UInt16)((UInt16)((byte)bSecondReturnByte) << 8);
                if (readchecksum != calculatedchecksum)
                {
                    WriteProgressLabel("First checksum failed.You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                    isDoneFlashing = true;
                    return;
                }
                //WriteProgressLabel("First checksum passed");

                calculatedchecksum = 0;

                reader = new System.IO.StreamReader(FileManager.GetInternalFirstOrExternalFileStream(strFileName));
                dFileLength = (float)reader.BaseStream.Length;



#if CONSOLE_WRITE
                System.Diagnostics.Debug.WriteLine("File length = " + reader.BaseStream.Length.ToString());
#endif
#if DOWNLOAD_TESTING
                    WriteProgressLabel("Step 2 of 2 Processing file Please Wait Count =" + (Downloadcount + 1).ToString());
#else
                WriteProgressLabel("Step 2 of 2 Processing file Please Wait");
#endif
                UpdateProgressBar(0.0f);

                list = null;
                checksums = null;
                UInt16 OldLowerAddress = 0;
                UInt16 NewLowerAddress = 0;
                UInt16 FileLineNumber = 0;

                while ((line = reader.ReadLine()) != null)
                {
                    FileLineNumber++;
#if CONSOLE_WRITE

                        System.Diagnostics.Debug.WriteLine("Line Number = " + FileLineNumber.ToString());
#endif

                    LineConvertedToCharArray = line.ToCharArray();

                    NumberOfCharsRead += LineConvertedToCharArray.Length;

                    BlockPercentComplete = (float)NumberOfCharsRead / (float)dFileLength;

                    if (LineConvertedToCharArray[8] == '0')
                    {
                        NewLowerAddress = Convert.ToUInt16(new string(LineConvertedToCharArray, 3, 4), 16);


                        if (list.Count == 0)  // This means a new block
                        {
                            DestAddr &= 0xffff0000;
                            DestAddr |= (UInt32)NewLowerAddress;
#if CONSOLE_WRITE
                                System.Diagnostics.Debug.WriteLine("DestAddress = " + DestAddr.ToString("X"));
#endif

                        }
                        else
                        {
                            if (NewLowerAddress != (OldLowerAddress + NumberOfBytes / 2))
                            {
#if DOWNLOAD_TESTING
                                    WriteProgressLabel("Step 2 of 2 Writing Blocks Please Wait Count =" + (Downloadcount + 1).ToString());
#else
                                WriteProgressLabel("Step 2 of 2 Writing Blocks Please Wait");
#endif
                                //NumberOfBlocksProgrammed = 0;
                                //UpdateBlocksProgressBar(0.0f);
                                if (WriteBlocks() == false)
                                    return;
                                //UpdateBlocksProgressBar(1.0f);
                                DestAddr &= 0xffff0000;
                                DestAddr |= (UInt32)NewLowerAddress;

                                list = new List<byte>();
                                checksums = new List<ushort>();
                                calculatedchecksum = 0;

                            }
                        }


#if DOWNLOAD_TESTING
                            WriteProgressLabel("Step 2 of 2 Processing file Please Wait Count =" + (Downloadcount+1).ToString());

#else
                        WriteProgressLabel("Step 2 of 2 Processing file Please Wait");
#endif
                        NumberOfBytes = Convert.ToByte(new string(LineConvertedToCharArray, 1, 2), 16);

                        OldLowerAddress = NewLowerAddress;
                        string strDisplay = null;
                        for (DataIndex = 0; DataIndex < (NumberOfBytes >> 1); DataIndex++)
                        {
                            WordToSend = Convert.ToUInt16(new string(LineConvertedToCharArray, 9 + DataIndex * 4, 4), 16);
                            ByteToSend = (byte)WordToSend;
                            calculatedchecksum += ByteToSend;
                            list.Add(ByteToSend);

                            ByteToSend = (byte)(WordToSend >> 8);
                            calculatedchecksum += ByteToSend;
                            list.Add(ByteToSend);



                            if ((list.Count % 0x4000) == 0)
                            {
                                checksums.Add(calculatedchecksum);
                                calculatedchecksum = 0;
                            }

                            strDisplay += ByteToSend.ToString("X");
                            strDisplay += " ";


                        }
#if CONSOLE_WRITE

                            System.Diagnostics.Debug.WriteLine(strDisplay);
#endif
                    }
                    else if (LineConvertedToCharArray[8] == '4' || LineConvertedToCharArray[8] == '1')
                    {
                        if (list != null)  // write the previous block 
                        {
#if DOWNLOAD_TESTING
                                WriteProgressLabel("Step 2 of 2 Writing Blocks Please Wait Count =" + (Downloadcount + 1).ToString());
#else
                            WriteProgressLabel("Step 2 of 2 Writing Blocks Please Wait");
#endif
                            //NumberOfBlocksProgrammed = 0;
                            //UpdateBlocksProgressBar(0.0f);
                            if (WriteBlocks() == false)
                                return;
                            //UpdateBlocksProgressBar(1.0f);
                        }

                        if (LineConvertedToCharArray[8] != '1')
                        {
                            list = new List<byte>();
                            checksums = new List<ushort>();
                            calculatedchecksum = 0;
                            strDestAddr = new string(LineConvertedToCharArray, 9, 4);

                            DestAddr = (UInt32)Convert.ToUInt16(strDestAddr, 16) << 16;
                        }


                    }

                    //PercentComplete = (float)NumberOfCharsRead / (float)dFileLength;
                    //if ((PercentComplete - progressBar.Progress) > 0.01)
                    //    Device.BeginInvokeOnMainThread(() =>
                    //    {


                    //        progressBar.Progress = PercentComplete;

                    //    });

                }
                System.Diagnostics.Debug.WriteLine(DateTime.Now.Millisecond + ": Writing reboot bytes");

                calculatedchecksum = 0;
                WriteByteWithNoResponse(0);
                WriteByteWithNoResponse(0);
                System.Diagnostics.Debug.WriteLine(DateTime.Now.Second + ": Finished");
                WriteProgressLabel("Rebooting Controller Please Wait....");
                await Task.Delay(5000);
                System.Diagnostics.Debug.WriteLine(DateTime.Now.Second + ": Finished");
                reader.Dispose();
                UpdateProgressBar(1.0f);
                UpdateBlocksProgressBar(1.0f);
                isDoneFlashing = true;
                AlreadyTalkingToBootloader = false;
                ProgrammingDone(this, null);
                BlockFromEntering = false;
                //Add below line and remove if statement to enable restore (see commit 1696 for details)
                //WriteProgressLabel("Restoring Parameters Please Wait...");

                await ReadOneParameter(App.ViewModelLocator.GetParameter("GROUPONEFAULTS"));
                if (((int)(int)App.ViewModelLocator.GetParameter("GROUPONEFAULTS").parameterValue & (int)(1 << (int)GroupOneFaults.ParameterTableInvalidGroupOneFault)) != 0)
                {
                    WriteProgressLabel("Initializing Factory Defaults");
                    QueParameter(new SetParameterEventArgs(49, 1.0f, null));
                    await Task.Delay(2000);
                // reload diff parameter
                //Stream streamToRead = App.FileUtilities.GetFile(Path.Combine(App.FileUtilities.XPlatformFilesGetDirectoryPath("Navitas"), "backupDiffParameterFile.xml"));
                //diffParameters = new ObservableCollection<ParameterFileItem>();

                //if (streamToRead != null)
                //{
                //    diffParameters = (ObservableCollection<ParameterFileItem>)(new XmlSerializer(typeof(ObservableCollection<ParameterFileItem>))).Deserialize(streamToRead);
                //    streamToRead.Dispose();

                //    foreach (var parameterFileItem in diffParameters)
                //    {
                //        QueParameter(new SetParameterEventArgs(parameterFileItem.Address, parameterFileItem.ParameterValue, null));
                //    }
                //}
                    QueParameter(new SetParameterEventArgs(50, 1.0f, null));
                    WriteProgressLabel("Saving Parameters Please Wait...");
                    await ReadOneParameter(App.ViewModelLocator.GetParameter("GROUPONEFAULTS"));
                }

                WriteProgressLabel("Programming Done");
                RemoveProgressLabelPopUp();


#if DOWNLOAD_TESTING
                    await ReadOneParameter(App.ViewModelLocator.GetParameter("SOFTWAREREVISION"));
                    var a = App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue;
                    if (Downloadcount % 2 == 0)
                        if (a != 5.751) System.Diagnostics.Debug.WriteLine("Version Not Match 5.751");
                        else
                           if (a != 8.017) System.Diagnostics.Debug.WriteLine("Version Not Match 8.017");
                    await Task.Delay(2000);
#else
                Device.BeginInvokeOnMainThread(async () =>
                {
                    await this.DisplayAlert("Programming Done", null, "OK");
                });
#endif
            }
#if DOWNLOAD_TESTING
            }
#endif
        }

        private bool WriteBlocks()
        {
            blockandaddresschecksum = 0;
            NumberOfWords = (ushort)(list.Count >> 1);
#if CONSOLE_WRITE
            System.Diagnostics.Debug.WriteLine("Block Size In Words = " + NumberOfWords.ToString());
#endif
            WriteByteWithNoResponseBlockAndAddress((byte)NumberOfWords);
            WriteByteWithNoResponseBlockAndAddress((byte)(NumberOfWords >> 8));


            System.Diagnostics.Debug.WriteLine("DestAddr = " + DestAddr.ToString("X"));

            WriteByteWithNoResponseBlockAndAddress((byte)((DestAddr >> 16) & 0x000000ff));
            WriteByteWithNoResponseBlockAndAddress((byte)((DestAddr >> 24) & 0x000000ff));
            WriteByteWithNoResponseBlockAndAddress((byte)((DestAddr) & 0x000000ff));
            WriteByteWithNoResponseBlockAndAddress((byte)((DestAddr >> 8) & 0x000000ff));

#if CONSOLE_WRITE
            System.Diagnostics.Debug.WriteLine("Write the list");
            System.Diagnostics.Debug.WriteLine("checksums.Count = " + checksums.Count.ToString());
#endif
            int i = 0;
            for (i = 0; i < checksums.Count; i++)  // the number of checksums is the number of blocks
            {
#if CONSOLE_WRITE
                System.Diagnostics.Debug.WriteLine("Write a block i = " + i.ToString());
#endif
                WriteBlockWithResponse(list.GetRange(i * 0x4000, 0x4000));
                //UpdateBlocksProgressBar((float)(i) / checksums.Count);
                readchecksum = (byte)bReturnByte;
                if (numberofbytesreceived >= 2)  // Really wierd that extra zeros come back sometimes on android wtf?
                {
#if CONSOLE_WRITE
                    System.Diagnostics.Debug.WriteLine("Number of bytes received is 2");
#endif
                    readchecksum |= (UInt16)((UInt16)((byte)bSecondReturnByte) << 8);
                }
                else if (numberofbytesreceived == 1)
                {
                    System.Diagnostics.Debug.WriteLine("Calling Wait numberofbytesreceived = " + numberofbytesreceived.ToString());

                    if (Wait() == true)
                    {
                        System.Diagnostics.Debug.WriteLine("Second byte received");
                        readchecksum |= (UInt16)((UInt16)((byte)bReturnByte) << 8);
                    }
                    else
                    {
                        WriteProgressLabel("Checksum not recieved. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                        isDoneFlashing = true;
                        return false;
                    }
                }
                if (i == 0)
                {
                    checksums[i] += blockandaddresschecksum;
                }
#if CONSOLE_WRITE
                System.Diagnostics.Debug.WriteLine("i = " + i.ToString("X") + " readchecksum = " + readchecksum.ToString("X") + " checksum[i] = " + checksums[i].ToString("X"));
#endif
                if (readchecksum != checksums[i])
                {
                    WriteProgressLabel("Checksum not recieved 2. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                    isDoneFlashing = true;
                    return false;
                }
#if CONSOLE_WRITE
                else
                {

                    System.Diagnostics.Debug.WriteLine("Checksum Passed");
                }
#endif
            }
            if (list.Count > (checksums.Count * 0x4000))
            {
                if (i == 0)
                {
                    calculatedchecksum += blockandaddresschecksum;
                }

                System.Diagnostics.Debug.WriteLine("Write the last block i = " + i.ToString());
                WriteBlockWithResponse(list.GetRange(i * 0x4000, list.Count - (checksums.Count * 0x4000)));
                readchecksum = (byte)bReturnByte;
                if (numberofbytesreceived == 2)
                {
                    System.Diagnostics.Debug.WriteLine("Number of bytes received is 2 last block");
                    readchecksum |= (UInt16)((UInt16)((byte)bSecondReturnByte) << 8);
                }
                else
                {
                    if (Wait() == true)
                        readchecksum |= (UInt16)((UInt16)((byte)bReturnByte) << 8);
                    else
                    {
                        WriteProgressLabel("Checksum not recieved 2. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                        isDoneFlashing = true;
                        return false;
                    }
                }
                System.Diagnostics.Debug.WriteLine("i = " + i.ToString("X") + " readchecksum = " + readchecksum.ToString("X") + " calculatedchecksum = " + calculatedchecksum.ToString("X"));
                if (readchecksum != calculatedchecksum)
                {
                    WriteProgressLabel("data 2 checksum failed. You will have to FORCE CLOSE this App, POWER CYCLE the controller and then restart this download");
                    isDoneFlashing = true;
                    return false;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Checksum Passed");
                }
            }
            return true;
        }
        string strFileName;
        public void OnButtonClicked(object sender, EventArgs args)
        {

            if (BlockFromEntering == false)
            {
                string strwarning = null;
                string strModelNameAndVersion = "";
                int mainVersion = 8; //minimum
                Button button = (Button)sender;

                if ((args as EventArgs<string[]>) != null)
                {
                    strFileName = (args as EventArgs<string[]>).Value[0];
                    strModelNameAndVersion = (args as EventArgs<string[]>).Value[1];
                    //Parse firmware version out, and take the number before decimal point
                    Match match = Regex.Match(strFileName, @"(?<=_v)\d+(?=.)", RegexOptions.IgnoreCase);

                    if (match.Success)
                        mainVersion = int.Parse(match.Value);
                }
                
                strwarning = "Are you sure you want to download " + strModelNameAndVersion;

                //Customers are not allowed to downgrade from version 8.xxx
                if (App.ViewModelLocator.GetParameter("CtrlBrdHwRev").parameterValue >= 3.0 && mainVersion < 8)
                {
                    DisplayAlert("Error", "Can not downgrade to lower version", "Close"); //Need better wording
                }
                else if (App.ViewModelLocator.GetParameter("FLAGGATEENABLE").parameterValue != 0 && !AlreadyTalkingToBootloader) //AlreadyTalkingToBootloader means flaggateenable is not valid
                {
                    DisplayAlert("VEHICLE IS ENABLED", "Ensure vehicle is stopped, place in neutral and set parking brake before continuing", "Back to Downloads");
                }
                else
                {
                    if (!strModelNameAndVersion.Contains("Program"))
                    {
                        Task<bool> task = DisplayAlert("Firmware Download", strwarning, "Yes", "Cancel");
                        task.ContinueWith(AlertDismissedCallback);
                    }
                    else
                    {
                        //Designed for China test program purposes
                        Task<bool> task = HackTask();
                        task.ContinueWith(AlertDismissedCallback);
                    }
                }
            }
        }

        public Task<bool> HackTask()
        {
            return Task.FromResult(true);
        }
        int childPositionCounter = 1;
        string[] fileList = FileManager.GetNavitasDirectoryFiles();

        void InsertFileList()
        {
            try
            {
                //checked for public NavitasBeta directory xml file
                StackLayout latestUpdatesStackLayout = new StackLayout();
                bool isLatestUpdatesStackLayoutCreated = false;
                bool isFirmwareScreenExtensionFound = false;
                FirmwaresGroups releaseFirmwareFileNames = null;
                Stream streamToRead = null;


                if (fileList != null)
                {
                    bool fileNeedsToBeAdded = true;

                    //find .TACFirmwareScreen only
                    foreach (var externalFile in fileList)
                    {
                        if (fileNeedsToBeAdded && externalFile.Contains(".TACFirmwareScreen"))
                        {
                            var firmwareFilename = Regex.Match(externalFile, @"([^\/]+$)", RegexOptions.IgnoreCase).Value;
                            streamToRead = FileManager.GetExternalFileStream(firmwareFilename);
                            isFirmwareScreenExtensionFound = true;
                            break;
                        }
                    }

                    //Otherwise, display single hex file under Latest Updates
                    if (!isFirmwareScreenExtensionFound)
                    {
                        foreach (var publicFilePath in fileList)
                        {
                            //foreach (var button in listOfFrames.Where(x => (x as VisualElement).GetType() == typeof(Button)))
                            //{
                            //    if ((button as Button).Text.Contains(fileName))
                            //        fileNeedsToBeAdded = false;
                            //}

                            if ((fileNeedsToBeAdded && publicFilePath.Contains(".hex") || fileNeedsToBeAdded && publicFilePath.Contains(".TAChex")) && !publicFilePath.Contains("TSX"))
                            {
                                //Create Latest Updates Stacklayout
                                if (!isLatestUpdatesStackLayoutCreated)
                                {
                                    isLatestUpdatesStackLayoutCreated = true;
                                    latestUpdatesStackLayout.Children.Add(BuildGroupTitle("Latest Updates", groupTitleHexColor));

                                    if(streamToRead == null)
                                    {
                                        streamToRead = FileManager.GetInternalFileStream($"NavitasBeta.firmware.TAC.Original.TACFirmwareScreen");
                                        releaseFirmwareFileNames = (FirmwaresGroups)(new XmlSerializer(typeof(FirmwaresGroups))).Deserialize(streamToRead);
                                        streamToRead.Dispose();
                                    }
                                }

                                string publicFileName = Path.GetFileName(publicFilePath);

                                // TODO: RegEx shoud be gathered in one place
                                Match match = Regex.Match(publicFileName, @"(?![P\d_]+)(\w+).(?=\d{2}\.)", RegexOptions.IgnoreCase);
                                Regex PriorityNumberExtractor = new Regex(@"^(P\d+(\.\d+)?)_");

                                ;
                                if (match.Success)
                                {
                                    string friendlyFileName = "";
                                    for (int i = 0; i < releaseFirmwareFileNames.FirmwareGroups.Count; i++)
                                    {
                                        friendlyFileName = releaseFirmwareFileNames.FirmwareGroups[i]
                                                                                   .FileItems
                                                                                   .FirstOrDefault(fileItem => fileItem.ActualFileName.Contains(match.Value))
                                                                                   ?.FriendlyFileName ?? "404";
                                        //404 is a not found code
                                        if (friendlyFileName != "404")
                                            break;
                                    }

                                    if (friendlyFileName != "404")
                                    {
                                        var friendlyFileNameAndVersion = friendlyFileName + " " +
                                                                        Regex.Replace(Regex.Match(publicFileName, @"(?:(_v|_V)\d+).*(?=\.hex)", RegexOptions.IgnoreCase).Value, "_", "");

                                        latestUpdatesStackLayout.Children.Add(BuildFrameAndButton(friendlyFileNameAndVersion, friendlyFileName, publicFilePath)); 
                                    }else
                                    {
                                        publicFileName = PriorityNumberExtractor.Replace(publicFileName, "");
                                        latestUpdatesStackLayout.Children.Add(BuildFrameAndButton(publicFileName, publicFileName, publicFilePath));
                                    }
                                }
                            }
                        }
                        FileButtonList.Children.Insert(childPositionCounter, latestUpdatesStackLayout);
                        childPositionCounter++;
                    }
                }

                //if there is no public xml file, go check the embedded one (internal)
                if (streamToRead == null)
                    streamToRead = FileManager.GetInternalFileStream($"NavitasBeta.firmware.TAC.Original.TACFirmwareScreen");

                releaseFirmwareFileNames = releaseFirmwareFileNames ?? (FirmwaresGroups)(new XmlSerializer(typeof(FirmwaresGroups))).Deserialize(streamToRead);

                streamToRead.Dispose();

                bool isFullListRequired = false;

                if (!isFirmwareScreenExtensionFound)
                {
                    //Show the entire list except OEM's firmware when there is a mismatch issue or firmware not found
                    if (App._MainFlyoutPage._DeviceListPage._device is DemoDevice || AlreadyTalkingToBootloader || currentSupplierChain == null)
                        isFullListRequired = true;

                    ContinueBuildingFileButtonList(releaseFirmwareFileNames.FirmwareGroups,
                                                                            FileButtonList,
                                                                            childPositionCounter,
                                                                            isFullListRequired);
                }
                else //Neb stuff goes here
                {
                    ContinueBuildingFileButtonList(releaseFirmwareFileNames.FirmwareGroups,
                                                    FileButtonList,
                                                    childPositionCounter,
                                                    isFullListRequired,
                                                    true);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("Insert Files Exception: " + ex.Message);
            }
        }

        async Task GetFlashParameterList(PageParameterList PageParameters)
        {
            foreach (var v in App.ViewModelLocator.MainViewModel.GoiParameterList)
            {
                //start reading all flash parameters
                if ((v.Address != -1) && (v.MemoryType == GoiParameter.MemoryTypeAndAccess.Flash))
                {
                    if (v.SubsetOfAddress == false && v.Address != ParametersViewModel.ONLY_IN_APP
                        && !(App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue <= 1.280 && v.Address >= 256)
                        && !(App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue <= 5.000 && v.Address >= 512)
                        )
                    {
                        //just whole values not partial bits or enums or App variables
                        PageParameters.parameterList.Add(v);
                    }
                }
            }
            await communicationsReadWithWait(PageParameters);
        }
        async Task BackupDiffParameters()
        {
            PageParameterList PageParameters;

            PageParameters = new PageParameterList(PageParameterList.ParameterListType.TAC, this);
            await GetFlashParameterList(PageParameters);

           
            backupParameters = new ObservableCollection<ParameterFileItem>();

            foreach (var v in PageParameters.parameterList)
            {
                //start reading all flash parameters
                if (v.MemoryType == GoiParameter.MemoryTypeAndAccess.Flash)
                {

                    if (((ControllerTypeLocator.ControllerType == "TAC") && App.ViewModelLocator.GetParameter("SOFTWAREREVISION").parameterValue >= v.ImplementedFirmwareVersion))
                    {
                        ParameterFileItem fileParameter = new ParameterFileItem
                        {
                            Address = v.Address,
                            PropertyName = v.PropertyName,
                            ParameterValue = v.parameterValue,
                            ParameterValueRaw = v.rawValue
                        };

                        backupParameters.Add(fileParameter);
                    }
                }
            }


            MessagingCenter.Send<NavitasGeneralPage>(this, "StopActivity");

            QueParameter(new SetParameterEventArgs(49, 1.0f, null));
            await Task.Delay(2000);

            diffParameters = new ObservableCollection<ParameterFileItem>();
  
            PageParameters = new PageParameterList(PageParameterList.ParameterListType.TAC, this);
            await GetFlashParameterList(PageParameters);

            foreach (var parameterFileItem in backupParameters) //PageParameters.parameterList
            {
                if(App.ViewModelLocator.GetParameter(parameterFileItem.PropertyName).parameterValue != parameterFileItem.ParameterValue)
                {
                    ParameterFileItem fileParameter = new ParameterFileItem
                    {
                        Address = parameterFileItem.Address,
                        PropertyName = parameterFileItem.PropertyName,
                        ParameterValue = parameterFileItem.ParameterValue,
                        ParameterValueRaw = parameterFileItem.ParameterValueRaw
                    };

                    diffParameters.Add(fileParameter);
                }
            }
            StreamWriter streamToWrite = new StreamWriter(FileManager.CreateStream(Path.Combine(FileManager.GetNavitasDirectoryPath(), "backupDiffParameterFile" + ".xml")));
            new XmlSerializer(typeof(ObservableCollection<ParameterFileItem>)).Serialize(streamToWrite, diffParameters);//Writes to the file
            streamToWrite.Dispose();
        }
 
        async void AlertDismissedCallback(Task<bool> task)
        {
            System.Diagnostics.Debug.WriteLine("task.Result = " + task.Result);
            string Result = task.Result ? "Yes" : "Cancel";
            if (Result == "Yes")
            {
                //BlockFromEntering = true;
                await Task.Factory.StartNew(Download);
                BlockFromEntering = false;
            }
            else
            {
                BlockFromEntering = false;
            }
        }

        //     uint counter = 0;

        void UpdateBlocksProgressBar(float PercentComplete)
        {
#if CONSOLE_WRITE
            System.Diagnostics.Debug.WriteLine("PercentComplete = {0}", PercentComplete.ToString());
#endif
            Device.BeginInvokeOnMainThread(() =>
            {


                progressBarBlocks.Progress = PercentComplete;

            });

        }


        void UpdateProgressBar(float PercentComplete)
        {
#if CONSOLE_WRITE
            System.Diagnostics.Debug.WriteLine("PercentComplete = {0}", PercentComplete.ToString());
#endif
            Device.BeginInvokeOnMainThread(() =>
            {


                progressBar.Progress = PercentComplete;

            });

        }

        private void WriteByte(byte ByteToSend, bool bResponse)
        {
            calculatedchecksum += ByteToSend;
            bResponseHandShake = false;
            WriteEventArgs WriteEventArgs = new WriteEventArgs(ByteToSend);
            Write(this, WriteEventArgs);
            if (bResponse)
            {
                int previoustime = DateTime.Now.Second;
                while (!bResponseHandShake)
                {
                    int timeout = DateTime.Now.Second - previoustime;
                    if (timeout < 0)
                    {
                        timeout += 60;
                    }
                    if (timeout > 3)
                    {

                        Write(this, WriteEventArgs);
                        //          DisplayAlert("Error", String.Format("Timeout in WriteByteWithResponse NumberOfWords = {0} ByteToSend = {1} DestAddr = {2} ValidChecksumCount = {3}", NumberOfWords.ToString(),ByteToSend.ToString("X"), DestAddr.ToString("X"), ValidChecksumCount.ToString("X")), "OK");
                        System.Diagnostics.Debug.WriteLine("Finished timeout wait");
                        WriteProgressLabel("Timeout waiting for response");
                        break;
                    }
                    // Add a timeout
                }
            }
        }

        private void WriteBlockWithResponse(List<byte> listOfBytes)
        {

            bResponseHandShake = false;
            //      BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
            WriteBlock(this, new WriteBlockEventArgs(listOfBytes));
            DateTime previoustime = DateTime.Now;

            while (!bResponseHandShake)
            {
                if ((DateTime.Now - previoustime) > TimeSpan.FromSeconds(60))
                {
                    System.Diagnostics.Debug.WriteLine("WriteBlockWithResponse timeout wait for checksum");
                    WriteProgressLabel("Timeout waiting for response");
                    break;
                }
            }

        }


        private void Write20BytesWithResponse(List<byte> listOfBytes)
        {
            //   calculatedchecksum += BytesToSend[0];
            //    calculatedchecksum += BytesToSend[1];
            bResponseHandShake = false;
            //      BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
#if CONSOLE_WRITE
            System.Diagnostics.Debug.WriteLine("Write20BytesWithResponse(byte[] BytesToSend)");
#endif
            Write20Bytes(this, new WriteBlockEventArgs(listOfBytes));
            //Write2Bytes(this, new Write2ByteEventArgs(BytesToSend));
            //     Write(this, new WriteEventArgs(BytesToSend));
            int previoustime = DateTime.Now.Second;

            while (!bResponseHandShake)
            {
                int timeout = DateTime.Now.Second - previoustime;
                if (timeout < 0)
                {
                    timeout += 60;
                }
                if (timeout > 20)
                {

                    //          DisplayAlert("Error", String.Format("Timeout in WriteByteWithResponse NumberOfWords = {0} ByteToSend = {1} DestAddr = {2} ValidChecksumCount = {3}", NumberOfWords.ToString(),ByteToSend.ToString("X"), DestAddr.ToString("X"), ValidChecksumCount.ToString("X")), "OK");
                    WriteProgressLabel("Timeout waiting for response");
                    break;
                }
            }

        }


#if OLD
        private void Write2BytesWithResponse(byte[] BytesToSend)
        {
            calculatedchecksum += BytesToSend[0];
            calculatedchecksum += BytesToSend[1];
            bResponseHandShake = false;
            //      BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
            System.Diagnostics.Debug.WriteLine("Write2BytesWithResponse(byte[] BytesToSend)");

            Write2Bytes(this, new Write2ByteEventArgs(BytesToSend));
       //     Write(this, new WriteEventArgs(BytesToSend));
            int previoustime = DateTime.Now.Second;

            while (!bResponseHandShake)
            {
                int timeout = DateTime.Now.Second - previoustime;
                if (timeout < 0)
                {
                    timeout += 60;
                }
                if (timeout > 20)
                {

                    //          DisplayAlert("Error", String.Format("Timeout in WriteByteWithResponse NumberOfWords = {0} ByteToSend = {1} DestAddr = {2} ValidChecksumCount = {3}", NumberOfWords.ToString(),ByteToSend.ToString("X"), DestAddr.ToString("X"), ValidChecksumCount.ToString("X")), "OK");
                    WriteProgressLabel("Timeout waiting for response");
                    break;
                }
            }

        }
#endif

        private void WriteByteWithResponse(byte ByteToSend)
        {
            calculatedchecksum += ByteToSend;
            bResponseHandShake = false;
            //      BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
            Write(this, new WriteEventArgs(ByteToSend));
            int previoustime = DateTime.Now.Second;

            while (!bResponseHandShake)
            {
                int timeout = DateTime.Now.Second - previoustime;
                if (timeout < 0)
                {
                    timeout += 60;
                }
                if (timeout > 20)
                {

                    //          DisplayAlert("Error", String.Format("Timeout in WriteByteWithResponse NumberOfWords = {0} ByteToSend = {1} DestAddr = {2} ValidChecksumCount = {3}", NumberOfWords.ToString(),ByteToSend.ToString("X"), DestAddr.ToString("X"), ValidChecksumCount.ToString("X")), "OK");
                    WriteProgressLabel("Timeout waiting for response");
                    break;
                }
            }

        }

        bool Wait()
        {
            bResponseHandShake = false;
            int previoustime = DateTime.Now.Second;
            while (!bResponseHandShake)
            {
                int timeout = DateTime.Now.Second - previoustime;
                if (timeout < 0)
                {
                    timeout += 60;
                }
                if (timeout > 20)
                {
                    DisplayAlert("Error", "Timeout in Wait", "OK");

                    WriteProgressLabel("Timeout waiting for response");
                    return false;
                }
            }
            return true;
        }


        private void WriteByteWithNoResponseBlockAndAddress(byte ByteToSend)
        {
            blockandaddresschecksum += ByteToSend;


            bResponseHandShake = false;
            //     BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
            Write(this, new WriteEventArgs(ByteToSend));
            // Add a timeout
        }


        private void WriteByteWithNoResponse(byte ByteToSend)
        {


            calculatedchecksum += ByteToSend;
            bResponseHandShake = false;
            //     BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
            Write(this, new WriteEventArgs(ByteToSend));
            // Add a timeout
        }
#if OLD_CODE
        private void Write2BytesWithNoResponse(byte ByteToSend)
        {


            calculatedchecksum += ByteToSend;
            bResponseHandShake = false;
            //     BluetoothLE.Core.Events.WriteEventArgs WriteEventArgs = new Core.Events.WriteEventArgs(ByteToSend);
            Write(this, new WriteEventArgs(ByteToSend));
            // Add a timeout
        }
#endif

        int numberofbytesreceived;
        public void ResponseFromBootLoader(byte[] b)
        {
            numberofbytesreceived = b.Length;
            bReturnByte = b[0];
            if (b.Length >= 2)
            {
                bSecondReturnByte = b[1];
            }
            bResponseHandShake = true;
            //var index = 0;
            //foreach (byte mybyte in b)
            //{
            //    System.Diagnostics.Debug.WriteLine("ResponseFromBootLoader b[" + (index++).ToString() + "] = " + mybyte.ToString("X"));
            //}
        }

        public void WriteProgressLabel(string message)
        {
#if CONSOLE_WRITE
            System.Diagnostics.Debug.WriteLine(message);
#endif
            Device.BeginInvokeOnMainThread(() =>
            {


                popupBootLoader.IsVisible = true;
                progressLabel.Text = message;

            });
        }
        public void RemoveProgressLabelPopUp()
        {
            Device.BeginInvokeOnMainThread(() =>
            {
                popupBootLoader.IsVisible = false;
                progressLabel.Text = "";

            });
        }


        protected void OnCancelButtonClicked(object sender, EventArgs args)
        {
            popupFileListPicker.IsVisible = false;

            //float value = (App.ViewModelLocator.GetParameter("REARAXLERATIO").parameterValue * 25.0) / ((2 * (float)Math.PI * 60 / 5280 / 12) * App.ViewModelLocator.GetParameter("TIREDIAMETER").parameterValue / 2);
            //SetParameterEventArgs = new SetParameterEventArgs(70, (float)value, "Fwd Lmt RPM");
            //AddParamValuesToQueue(this, SetParameterEventArgs);
            ////mph calculated in viewmodel when rpm is written
        }

        int Counter = 0;

        async void progressTimedUpdate()
        {
            await Task.Delay(1000);
            //Device.BeginInvokeOnMainThread()
            UpdateProgressBar((float)(Counter / 122.0));
            UpdateBlocksProgressBar((float)(BlockPercentComplete));
            if (!isDoneFlashing)
            {
                Counter++;
                progressTimedUpdate();
            }
            else
            {
                Counter = 0;
            }
        }

        private async void BackbuttonClicked(object sender, EventArgs e)
        {
            Authentication.AlreadyCheckingCredentials = false; //in case it was dismissed then set this
            await Navigation.PopAsync();
        }
    }
}
